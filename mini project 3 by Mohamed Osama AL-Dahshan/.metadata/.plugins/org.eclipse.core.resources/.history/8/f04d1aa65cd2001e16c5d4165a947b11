/*
 * ch2.c
 *
 *  Created on: Feb 18, 2024
 *      Author: mod_n
 */

#include<avr/io.h>

#include<avr/interrupt.h>

unsigned char g_ticks=0;

void checks(void)
{
	PORTC ^=(1<<PC0);

	if( g_ticks == 2 )
	{
			PORTC ^=(1<<PC1);
		}

		if( g_ticks == 4 )
				{

					PORTC ^=(1<<PC1);

					PORTC ^=(1<<PC2);

					g_ticks=0;
				}
}

ISR(TIMER0_COMP_vect)
{
	g_ticks++;
	//PORTC ^=(1<<PC0);
	checks();
}

void TIMER0_init(void)
{
	TCCR0 |= (1<<FOC0) | (1<<WGM01) | (1<<CS01) ; // NOT PWM | MODE : CTC
	// | PRE-SCALER = 8

	TCNT0=0; // initial value

	OCR0=50; // compare value * 1 u sec = 50 u sec = Tp =1/10khz

	TIMSK|=(1<<OCIE0); // mask timer0 INT enabled

}

int main()
{
	TIMER0_init();

	SREG|=(1<<7); // I-bit enabled

	DDRC|= (1<<PC0) | (1<<PC1) | (1<<PC2); // PC0-PC2 are o/p pins

	PORTC &= ~(1<<PC0) & ~(1<<PC1) & ~(1<<PC2) ; // check they are cleared

	while(1)
	{/*
		if( g_ticks == 2 )
		{			SREG&=~(1<<7); // I-bit enabled

			PORTC ^=(1<<PC1);
			SREG|=(1<<7); // I-bit enabled

		}

		if( g_ticks == 4 )
				{
			SREG&=~(1<<7); // I-bit enabled

					PORTC ^=(1<<PC1);

					PORTC ^=(1<<PC2);

					g_ticks=0;
					SREG|=(1<<7); // I-bit enabled


				}

		if( g_ticks == 2 )
			{
					PORTC ^=(1<<PC1);
				}

		else if( g_ticks == 4 )
						{

							PORTC ^=(1<<PC1);

							PORTC ^=(1<<PC2);

							g_ticks=0;
						}*/
	}

}
