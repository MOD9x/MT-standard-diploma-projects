
mini_project_2_by_Mohamed_Osama_AL-Dahshan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000028f2  00002986  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080006e  0080006e  00002994  2**0
                  ALLOC
  3 .stab         00001f74  00000000  00000000  00002994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106e  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005976  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005ad6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a172  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000aa00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__vector_1>
       8:	0c 94 da 11 	jmp	0x23b4	; 0x23b4 <__vector_2>
       c:	0c 94 fb 11 	jmp	0x23f6	; 0x23f6 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 98 0d 	jmp	0x1b30	; 0x1b30 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ef       	ldi	r30, 0xF2	; 242
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 59 12 	call	0x24b2	; 0x24b2 <main>
      8a:	0c 94 77 14 	jmp	0x28ee	; 0x28ee <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 14 	jmp	0x282e	; 0x282e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 13 	jmp	0x27f6	; 0x27f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 14 	jmp	0x282e	; 0x282e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 14 	jmp	0x2806	; 0x2806 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 14 	jmp	0x280e	; 0x280e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0b 14 	jmp	0x2816	; 0x2816 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 27 14 	jmp	0x284e	; 0x284e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2e 97       	sbiw	r28, 0x0e	; 14
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	60 e0       	ldi	r22, 0x00	; 0
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	41 e0       	ldi	r20, 0x01	; 1
     cc2:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <GPIO_setupPinDirection>

	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	6f ef       	ldi	r22, 0xFF	; 255
     cca:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <GPIO_setupPortDirection>
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	a0 ea       	ldi	r26, 0xA0	; 160
     cd4:	b1 e4       	ldi	r27, 0x41	; 65
     cd6:	8b 87       	std	Y+11, r24	; 0x0b
     cd8:	9c 87       	std	Y+12, r25	; 0x0c
     cda:	ad 87       	std	Y+13, r26	; 0x0d
     cdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cde:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	4a e7       	ldi	r20, 0x7A	; 122
     cec:	53 e4       	ldi	r21, 0x43	; 67
     cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf2:	dc 01       	movw	r26, r24
     cf4:	cb 01       	movw	r24, r22
     cf6:	8f 83       	std	Y+7, r24	; 0x07
     cf8:	98 87       	std	Y+8, r25	; 0x08
     cfa:	a9 87       	std	Y+9, r26	; 0x09
     cfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cfe:	6f 81       	ldd	r22, Y+7	; 0x07
     d00:	78 85       	ldd	r23, Y+8	; 0x08
     d02:	89 85       	ldd	r24, Y+9	; 0x09
     d04:	9a 85       	ldd	r25, Y+10	; 0x0a
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	40 e8       	ldi	r20, 0x80	; 128
     d0c:	5f e3       	ldi	r21, 0x3F	; 63
     d0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d12:	88 23       	and	r24, r24
     d14:	2c f4       	brge	.+10     	; 0xd20 <LCD_init+0x82>
		__ticks = 1;
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	3f c0       	rjmp	.+126    	; 0xd9e <LCD_init+0x100>
	else if (__tmp > 65535)
     d20:	6f 81       	ldd	r22, Y+7	; 0x07
     d22:	78 85       	ldd	r23, Y+8	; 0x08
     d24:	89 85       	ldd	r24, Y+9	; 0x09
     d26:	9a 85       	ldd	r25, Y+10	; 0x0a
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	3f ef       	ldi	r19, 0xFF	; 255
     d2c:	4f e7       	ldi	r20, 0x7F	; 127
     d2e:	57 e4       	ldi	r21, 0x47	; 71
     d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d34:	18 16       	cp	r1, r24
     d36:	4c f5       	brge	.+82     	; 0xd8a <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e2       	ldi	r20, 0x20	; 32
     d46:	51 e4       	ldi	r21, 0x41	; 65
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d58:	dc 01       	movw	r26, r24
     d5a:	cb 01       	movw	r24, r22
     d5c:	9e 83       	std	Y+6, r25	; 0x06
     d5e:	8d 83       	std	Y+5, r24	; 0x05
     d60:	0f c0       	rjmp	.+30     	; 0xd80 <LCD_init+0xe2>
     d62:	89 e1       	ldi	r24, 0x19	; 25
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	9c 81       	ldd	r25, Y+4	; 0x04
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <LCD_init+0xd0>
     d72:	9c 83       	std	Y+4, r25	; 0x04
     d74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d76:	8d 81       	ldd	r24, Y+5	; 0x05
     d78:	9e 81       	ldd	r25, Y+6	; 0x06
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d80:	8d 81       	ldd	r24, Y+5	; 0x05
     d82:	9e 81       	ldd	r25, Y+6	; 0x06
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	69 f7       	brne	.-38     	; 0xd62 <LCD_init+0xc4>
     d88:	14 c0       	rjmp	.+40     	; 0xdb2 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d8a:	6f 81       	ldd	r22, Y+7	; 0x07
     d8c:	78 85       	ldd	r23, Y+8	; 0x08
     d8e:	89 85       	ldd	r24, Y+9	; 0x09
     d90:	9a 85       	ldd	r25, Y+10	; 0x0a
     d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	9e 83       	std	Y+6, r25	; 0x06
     d9c:	8d 83       	std	Y+5, r24	; 0x05
     d9e:	8d 81       	ldd	r24, Y+5	; 0x05
     da0:	9e 81       	ldd	r25, Y+6	; 0x06
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
     da6:	89 81       	ldd	r24, Y+1	; 0x01
     da8:	9a 81       	ldd	r25, Y+2	; 0x02
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <LCD_init+0x10c>
     dae:	9a 83       	std	Y+2, r25	; 0x02
     db0:	89 83       	std	Y+1, r24	; 0x01
	/* Setup the LCD connections ( RS , E and DATA ) */

	_delay_ms(20); /* LCD Power ON delay always > 15ms */

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
     db2:	88 e3       	ldi	r24, 0x38	; 56
     db4:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     db8:	8c e0       	ldi	r24, 0x0C	; 12
     dba:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCD_sendCommand>
}
     dc4:	2e 96       	adiw	r28, 0x0e	; 14
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	de bf       	out	0x3e, r29	; 62
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	cd bf       	out	0x3d, r28	; 61
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the LCD
 */
void LCD_sendCommand(uint8 command)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	e9 97       	sbiw	r28, 0x39	; 57
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	a0 e8       	ldi	r26, 0x80	; 128
     dfc:	bf e3       	ldi	r27, 0x3F	; 63
     dfe:	8d ab       	std	Y+53, r24	; 0x35
     e00:	9e ab       	std	Y+54, r25	; 0x36
     e02:	af ab       	std	Y+55, r26	; 0x37
     e04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e06:	6d a9       	ldd	r22, Y+53	; 0x35
     e08:	7e a9       	ldd	r23, Y+54	; 0x36
     e0a:	8f a9       	ldd	r24, Y+55	; 0x37
     e0c:	98 ad       	ldd	r25, Y+56	; 0x38
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	4a e7       	ldi	r20, 0x7A	; 122
     e14:	53 e4       	ldi	r21, 0x43	; 67
     e16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	89 ab       	std	Y+49, r24	; 0x31
     e20:	9a ab       	std	Y+50, r25	; 0x32
     e22:	ab ab       	std	Y+51, r26	; 0x33
     e24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e26:	69 a9       	ldd	r22, Y+49	; 0x31
     e28:	7a a9       	ldd	r23, Y+50	; 0x32
     e2a:	8b a9       	ldd	r24, Y+51	; 0x33
     e2c:	9c a9       	ldd	r25, Y+52	; 0x34
     e2e:	20 e0       	ldi	r18, 0x00	; 0
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	40 e8       	ldi	r20, 0x80	; 128
     e34:	5f e3       	ldi	r21, 0x3F	; 63
     e36:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e3a:	88 23       	and	r24, r24
     e3c:	2c f4       	brge	.+10     	; 0xe48 <LCD_sendCommand+0x72>
		__ticks = 1;
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	98 ab       	std	Y+48, r25	; 0x30
     e44:	8f a7       	std	Y+47, r24	; 0x2f
     e46:	3f c0       	rjmp	.+126    	; 0xec6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
     e48:	69 a9       	ldd	r22, Y+49	; 0x31
     e4a:	7a a9       	ldd	r23, Y+50	; 0x32
     e4c:	8b a9       	ldd	r24, Y+51	; 0x33
     e4e:	9c a9       	ldd	r25, Y+52	; 0x34
     e50:	20 e0       	ldi	r18, 0x00	; 0
     e52:	3f ef       	ldi	r19, 0xFF	; 255
     e54:	4f e7       	ldi	r20, 0x7F	; 127
     e56:	57 e4       	ldi	r21, 0x47	; 71
     e58:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e5c:	18 16       	cp	r1, r24
     e5e:	4c f5       	brge	.+82     	; 0xeb2 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e60:	6d a9       	ldd	r22, Y+53	; 0x35
     e62:	7e a9       	ldd	r23, Y+54	; 0x36
     e64:	8f a9       	ldd	r24, Y+55	; 0x37
     e66:	98 ad       	ldd	r25, Y+56	; 0x38
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e2       	ldi	r20, 0x20	; 32
     e6e:	51 e4       	ldi	r21, 0x41	; 65
     e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e74:	dc 01       	movw	r26, r24
     e76:	cb 01       	movw	r24, r22
     e78:	bc 01       	movw	r22, r24
     e7a:	cd 01       	movw	r24, r26
     e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e80:	dc 01       	movw	r26, r24
     e82:	cb 01       	movw	r24, r22
     e84:	98 ab       	std	Y+48, r25	; 0x30
     e86:	8f a7       	std	Y+47, r24	; 0x2f
     e88:	0f c0       	rjmp	.+30     	; 0xea8 <LCD_sendCommand+0xd2>
     e8a:	89 e1       	ldi	r24, 0x19	; 25
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	9e a7       	std	Y+46, r25	; 0x2e
     e90:	8d a7       	std	Y+45, r24	; 0x2d
     e92:	8d a5       	ldd	r24, Y+45	; 0x2d
     e94:	9e a5       	ldd	r25, Y+46	; 0x2e
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	f1 f7       	brne	.-4      	; 0xe96 <LCD_sendCommand+0xc0>
     e9a:	9e a7       	std	Y+46, r25	; 0x2e
     e9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea0:	98 a9       	ldd	r25, Y+48	; 0x30
     ea2:	01 97       	sbiw	r24, 0x01	; 1
     ea4:	98 ab       	std	Y+48, r25	; 0x30
     ea6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
     eaa:	98 a9       	ldd	r25, Y+48	; 0x30
     eac:	00 97       	sbiw	r24, 0x00	; 0
     eae:	69 f7       	brne	.-38     	; 0xe8a <LCD_sendCommand+0xb4>
     eb0:	14 c0       	rjmp	.+40     	; 0xeda <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb2:	69 a9       	ldd	r22, Y+49	; 0x31
     eb4:	7a a9       	ldd	r23, Y+50	; 0x32
     eb6:	8b a9       	ldd	r24, Y+51	; 0x33
     eb8:	9c a9       	ldd	r25, Y+52	; 0x34
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	98 ab       	std	Y+48, r25	; 0x30
     ec4:	8f a7       	std	Y+47, r24	; 0x2f
     ec6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ec8:	98 a9       	ldd	r25, Y+48	; 0x30
     eca:	9c a7       	std	Y+44, r25	; 0x2c
     ecc:	8b a7       	std	Y+43, r24	; 0x2b
     ece:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed0:	9c a5       	ldd	r25, Y+44	; 0x2c
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <LCD_sendCommand+0xfc>
     ed6:	9c a7       	std	Y+44, r25	; 0x2c
     ed8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	61 e0       	ldi	r22, 0x01	; 1
     ede:	41 e0       	ldi	r20, 0x01	; 1
     ee0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e8       	ldi	r26, 0x80	; 128
     eea:	bf e3       	ldi	r27, 0x3F	; 63
     eec:	8f a3       	std	Y+39, r24	; 0x27
     eee:	98 a7       	std	Y+40, r25	; 0x28
     ef0:	a9 a7       	std	Y+41, r26	; 0x29
     ef2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ef4:	6f a1       	ldd	r22, Y+39	; 0x27
     ef6:	78 a5       	ldd	r23, Y+40	; 0x28
     ef8:	89 a5       	ldd	r24, Y+41	; 0x29
     efa:	9a a5       	ldd	r25, Y+42	; 0x2a
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a e7       	ldi	r20, 0x7A	; 122
     f02:	53 e4       	ldi	r21, 0x43	; 67
     f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8b a3       	std	Y+35, r24	; 0x23
     f0e:	9c a3       	std	Y+36, r25	; 0x24
     f10:	ad a3       	std	Y+37, r26	; 0x25
     f12:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f14:	6b a1       	ldd	r22, Y+35	; 0x23
     f16:	7c a1       	ldd	r23, Y+36	; 0x24
     f18:	8d a1       	ldd	r24, Y+37	; 0x25
     f1a:	9e a1       	ldd	r25, Y+38	; 0x26
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	40 e8       	ldi	r20, 0x80	; 128
     f22:	5f e3       	ldi	r21, 0x3F	; 63
     f24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f28:	88 23       	and	r24, r24
     f2a:	2c f4       	brge	.+10     	; 0xf36 <LCD_sendCommand+0x160>
		__ticks = 1;
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	9a a3       	std	Y+34, r25	; 0x22
     f32:	89 a3       	std	Y+33, r24	; 0x21
     f34:	3f c0       	rjmp	.+126    	; 0xfb4 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
     f36:	6b a1       	ldd	r22, Y+35	; 0x23
     f38:	7c a1       	ldd	r23, Y+36	; 0x24
     f3a:	8d a1       	ldd	r24, Y+37	; 0x25
     f3c:	9e a1       	ldd	r25, Y+38	; 0x26
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	3f ef       	ldi	r19, 0xFF	; 255
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	57 e4       	ldi	r21, 0x47	; 71
     f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	4c f5       	brge	.+82     	; 0xfa0 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f4e:	6f a1       	ldd	r22, Y+39	; 0x27
     f50:	78 a5       	ldd	r23, Y+40	; 0x28
     f52:	89 a5       	ldd	r24, Y+41	; 0x29
     f54:	9a a5       	ldd	r25, Y+42	; 0x2a
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e2       	ldi	r20, 0x20	; 32
     f5c:	51 e4       	ldi	r21, 0x41	; 65
     f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f62:	dc 01       	movw	r26, r24
     f64:	cb 01       	movw	r24, r22
     f66:	bc 01       	movw	r22, r24
     f68:	cd 01       	movw	r24, r26
     f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f6e:	dc 01       	movw	r26, r24
     f70:	cb 01       	movw	r24, r22
     f72:	9a a3       	std	Y+34, r25	; 0x22
     f74:	89 a3       	std	Y+33, r24	; 0x21
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <LCD_sendCommand+0x1c0>
     f78:	89 e1       	ldi	r24, 0x19	; 25
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	98 a3       	std	Y+32, r25	; 0x20
     f7e:	8f 8f       	std	Y+31, r24	; 0x1f
     f80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f82:	98 a1       	ldd	r25, Y+32	; 0x20
     f84:	01 97       	sbiw	r24, 0x01	; 1
     f86:	f1 f7       	brne	.-4      	; 0xf84 <LCD_sendCommand+0x1ae>
     f88:	98 a3       	std	Y+32, r25	; 0x20
     f8a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f8c:	89 a1       	ldd	r24, Y+33	; 0x21
     f8e:	9a a1       	ldd	r25, Y+34	; 0x22
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	9a a3       	std	Y+34, r25	; 0x22
     f94:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f96:	89 a1       	ldd	r24, Y+33	; 0x21
     f98:	9a a1       	ldd	r25, Y+34	; 0x22
     f9a:	00 97       	sbiw	r24, 0x00	; 0
     f9c:	69 f7       	brne	.-38     	; 0xf78 <LCD_sendCommand+0x1a2>
     f9e:	14 c0       	rjmp	.+40     	; 0xfc8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fa0:	6b a1       	ldd	r22, Y+35	; 0x23
     fa2:	7c a1       	ldd	r23, Y+36	; 0x24
     fa4:	8d a1       	ldd	r24, Y+37	; 0x25
     fa6:	9e a1       	ldd	r25, Y+38	; 0x26
     fa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	9a a3       	std	Y+34, r25	; 0x22
     fb2:	89 a3       	std	Y+33, r24	; 0x21
     fb4:	89 a1       	ldd	r24, Y+33	; 0x21
     fb6:	9a a1       	ldd	r25, Y+34	; 0x22
     fb8:	9e 8f       	std	Y+30, r25	; 0x1e
     fba:	8d 8f       	std	Y+29, r24	; 0x1d
     fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fbe:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <LCD_sendCommand+0x1ea>
     fc4:	9e 8f       	std	Y+30, r25	; 0x1e
     fc6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	69 ad       	ldd	r22, Y+57	; 0x39
     fcc:	0e 94 2c 11 	call	0x2258	; 0x2258 <GPIO_writePort>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	a0 e8       	ldi	r26, 0x80	; 128
     fd6:	bf e3       	ldi	r27, 0x3F	; 63
     fd8:	89 8f       	std	Y+25, r24	; 0x19
     fda:	9a 8f       	std	Y+26, r25	; 0x1a
     fdc:	ab 8f       	std	Y+27, r26	; 0x1b
     fde:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe0:	69 8d       	ldd	r22, Y+25	; 0x19
     fe2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fe4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fe6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a e7       	ldi	r20, 0x7A	; 122
     fee:	53 e4       	ldi	r21, 0x43	; 67
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	8d 8b       	std	Y+21, r24	; 0x15
     ffa:	9e 8b       	std	Y+22, r25	; 0x16
     ffc:	af 8b       	std	Y+23, r26	; 0x17
     ffe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1000:	6d 89       	ldd	r22, Y+21	; 0x15
    1002:	7e 89       	ldd	r23, Y+22	; 0x16
    1004:	8f 89       	ldd	r24, Y+23	; 0x17
    1006:	98 8d       	ldd	r25, Y+24	; 0x18
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e8       	ldi	r20, 0x80	; 128
    100e:	5f e3       	ldi	r21, 0x3F	; 63
    1010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1014:	88 23       	and	r24, r24
    1016:	2c f4       	brge	.+10     	; 0x1022 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	9c 8b       	std	Y+20, r25	; 0x14
    101e:	8b 8b       	std	Y+19, r24	; 0x13
    1020:	3f c0       	rjmp	.+126    	; 0x10a0 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1022:	6d 89       	ldd	r22, Y+21	; 0x15
    1024:	7e 89       	ldd	r23, Y+22	; 0x16
    1026:	8f 89       	ldd	r24, Y+23	; 0x17
    1028:	98 8d       	ldd	r25, Y+24	; 0x18
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	3f ef       	ldi	r19, 0xFF	; 255
    102e:	4f e7       	ldi	r20, 0x7F	; 127
    1030:	57 e4       	ldi	r21, 0x47	; 71
    1032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1036:	18 16       	cp	r1, r24
    1038:	4c f5       	brge	.+82     	; 0x108c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103a:	69 8d       	ldd	r22, Y+25	; 0x19
    103c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    103e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1040:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	bc 01       	movw	r22, r24
    1054:	cd 01       	movw	r24, r26
    1056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105a:	dc 01       	movw	r26, r24
    105c:	cb 01       	movw	r24, r22
    105e:	9c 8b       	std	Y+20, r25	; 0x14
    1060:	8b 8b       	std	Y+19, r24	; 0x13
    1062:	0f c0       	rjmp	.+30     	; 0x1082 <LCD_sendCommand+0x2ac>
    1064:	89 e1       	ldi	r24, 0x19	; 25
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	9a 8b       	std	Y+18, r25	; 0x12
    106a:	89 8b       	std	Y+17, r24	; 0x11
    106c:	89 89       	ldd	r24, Y+17	; 0x11
    106e:	9a 89       	ldd	r25, Y+18	; 0x12
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <LCD_sendCommand+0x29a>
    1074:	9a 8b       	std	Y+18, r25	; 0x12
    1076:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1078:	8b 89       	ldd	r24, Y+19	; 0x13
    107a:	9c 89       	ldd	r25, Y+20	; 0x14
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	9c 8b       	std	Y+20, r25	; 0x14
    1080:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1082:	8b 89       	ldd	r24, Y+19	; 0x13
    1084:	9c 89       	ldd	r25, Y+20	; 0x14
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	69 f7       	brne	.-38     	; 0x1064 <LCD_sendCommand+0x28e>
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    108c:	6d 89       	ldd	r22, Y+21	; 0x15
    108e:	7e 89       	ldd	r23, Y+22	; 0x16
    1090:	8f 89       	ldd	r24, Y+23	; 0x17
    1092:	98 8d       	ldd	r25, Y+24	; 0x18
    1094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1098:	dc 01       	movw	r26, r24
    109a:	cb 01       	movw	r24, r22
    109c:	9c 8b       	std	Y+20, r25	; 0x14
    109e:	8b 8b       	std	Y+19, r24	; 0x13
    10a0:	8b 89       	ldd	r24, Y+19	; 0x13
    10a2:	9c 89       	ldd	r25, Y+20	; 0x14
    10a4:	98 8b       	std	Y+16, r25	; 0x10
    10a6:	8f 87       	std	Y+15, r24	; 0x0f
    10a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10aa:	98 89       	ldd	r25, Y+16	; 0x10
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	f1 f7       	brne	.-4      	; 0x10ac <LCD_sendCommand+0x2d6>
    10b0:	98 8b       	std	Y+16, r25	; 0x10
    10b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	61 e0       	ldi	r22, 0x01	; 1
    10b8:	40 e0       	ldi	r20, 0x00	; 0
    10ba:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e8       	ldi	r26, 0x80	; 128
    10c4:	bf e3       	ldi	r27, 0x3F	; 63
    10c6:	8b 87       	std	Y+11, r24	; 0x0b
    10c8:	9c 87       	std	Y+12, r25	; 0x0c
    10ca:	ad 87       	std	Y+13, r26	; 0x0d
    10cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d6:	20 e0       	ldi	r18, 0x00	; 0
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	4a e7       	ldi	r20, 0x7A	; 122
    10dc:	53 e4       	ldi	r21, 0x43	; 67
    10de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	8f 83       	std	Y+7, r24	; 0x07
    10e8:	98 87       	std	Y+8, r25	; 0x08
    10ea:	a9 87       	std	Y+9, r26	; 0x09
    10ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10ee:	6f 81       	ldd	r22, Y+7	; 0x07
    10f0:	78 85       	ldd	r23, Y+8	; 0x08
    10f2:	89 85       	ldd	r24, Y+9	; 0x09
    10f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e8       	ldi	r20, 0x80	; 128
    10fc:	5f e3       	ldi	r21, 0x3F	; 63
    10fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1102:	88 23       	and	r24, r24
    1104:	2c f4       	brge	.+10     	; 0x1110 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9e 83       	std	Y+6, r25	; 0x06
    110c:	8d 83       	std	Y+5, r24	; 0x05
    110e:	3f c0       	rjmp	.+126    	; 0x118e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1110:	6f 81       	ldd	r22, Y+7	; 0x07
    1112:	78 85       	ldd	r23, Y+8	; 0x08
    1114:	89 85       	ldd	r24, Y+9	; 0x09
    1116:	9a 85       	ldd	r25, Y+10	; 0x0a
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	3f ef       	ldi	r19, 0xFF	; 255
    111c:	4f e7       	ldi	r20, 0x7F	; 127
    111e:	57 e4       	ldi	r21, 0x47	; 71
    1120:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1124:	18 16       	cp	r1, r24
    1126:	4c f5       	brge	.+82     	; 0x117a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1128:	6b 85       	ldd	r22, Y+11	; 0x0b
    112a:	7c 85       	ldd	r23, Y+12	; 0x0c
    112c:	8d 85       	ldd	r24, Y+13	; 0x0d
    112e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <LCD_sendCommand+0x39a>
    1152:	89 e1       	ldi	r24, 0x19	; 25
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	9c 83       	std	Y+4, r25	; 0x04
    1158:	8b 83       	std	Y+3, r24	; 0x03
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	f1 f7       	brne	.-4      	; 0x115e <LCD_sendCommand+0x388>
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1166:	8d 81       	ldd	r24, Y+5	; 0x05
    1168:	9e 81       	ldd	r25, Y+6	; 0x06
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9e 83       	std	Y+6, r25	; 0x06
    116e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	69 f7       	brne	.-38     	; 0x1152 <LCD_sendCommand+0x37c>
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	9e 83       	std	Y+6, r25	; 0x06
    118c:	8d 83       	std	Y+5, r24	; 0x05
    118e:	8d 81       	ldd	r24, Y+5	; 0x05
    1190:	9e 81       	ldd	r25, Y+6	; 0x06
    1192:	9a 83       	std	Y+2, r25	; 0x02
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	9a 81       	ldd	r25, Y+2	; 0x02
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	f1 f7       	brne	.-4      	; 0x119a <LCD_sendCommand+0x3c4>
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    11a2:	e9 96       	adiw	r28, 0x39	; 57
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	e9 97       	sbiw	r28, 0x39	; 57
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	60 e0       	ldi	r22, 0x00	; 0
    11ce:	41 e0       	ldi	r20, 0x01	; 1
    11d0:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 e8       	ldi	r26, 0x80	; 128
    11da:	bf e3       	ldi	r27, 0x3F	; 63
    11dc:	8d ab       	std	Y+53, r24	; 0x35
    11de:	9e ab       	std	Y+54, r25	; 0x36
    11e0:	af ab       	std	Y+55, r26	; 0x37
    11e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e4:	6d a9       	ldd	r22, Y+53	; 0x35
    11e6:	7e a9       	ldd	r23, Y+54	; 0x36
    11e8:	8f a9       	ldd	r24, Y+55	; 0x37
    11ea:	98 ad       	ldd	r25, Y+56	; 0x38
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	4a e7       	ldi	r20, 0x7A	; 122
    11f2:	53 e4       	ldi	r21, 0x43	; 67
    11f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	89 ab       	std	Y+49, r24	; 0x31
    11fe:	9a ab       	std	Y+50, r25	; 0x32
    1200:	ab ab       	std	Y+51, r26	; 0x33
    1202:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1204:	69 a9       	ldd	r22, Y+49	; 0x31
    1206:	7a a9       	ldd	r23, Y+50	; 0x32
    1208:	8b a9       	ldd	r24, Y+51	; 0x33
    120a:	9c a9       	ldd	r25, Y+52	; 0x34
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	5f e3       	ldi	r21, 0x3F	; 63
    1214:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <LCD_displayCharacter+0x72>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	98 ab       	std	Y+48, r25	; 0x30
    1222:	8f a7       	std	Y+47, r24	; 0x2f
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1226:	69 a9       	ldd	r22, Y+49	; 0x31
    1228:	7a a9       	ldd	r23, Y+50	; 0x32
    122a:	8b a9       	ldd	r24, Y+51	; 0x33
    122c:	9c a9       	ldd	r25, Y+52	; 0x34
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	4f e7       	ldi	r20, 0x7F	; 127
    1234:	57 e4       	ldi	r21, 0x47	; 71
    1236:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    123a:	18 16       	cp	r1, r24
    123c:	4c f5       	brge	.+82     	; 0x1290 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123e:	6d a9       	ldd	r22, Y+53	; 0x35
    1240:	7e a9       	ldd	r23, Y+54	; 0x36
    1242:	8f a9       	ldd	r24, Y+55	; 0x37
    1244:	98 ad       	ldd	r25, Y+56	; 0x38
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e2       	ldi	r20, 0x20	; 32
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	98 ab       	std	Y+48, r25	; 0x30
    1264:	8f a7       	std	Y+47, r24	; 0x2f
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <LCD_displayCharacter+0xd2>
    1268:	89 e1       	ldi	r24, 0x19	; 25
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9e a7       	std	Y+46, r25	; 0x2e
    126e:	8d a7       	std	Y+45, r24	; 0x2d
    1270:	8d a5       	ldd	r24, Y+45	; 0x2d
    1272:	9e a5       	ldd	r25, Y+46	; 0x2e
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_displayCharacter+0xc0>
    1278:	9e a7       	std	Y+46, r25	; 0x2e
    127a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127c:	8f a5       	ldd	r24, Y+47	; 0x2f
    127e:	98 a9       	ldd	r25, Y+48	; 0x30
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	98 ab       	std	Y+48, r25	; 0x30
    1284:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1286:	8f a5       	ldd	r24, Y+47	; 0x2f
    1288:	98 a9       	ldd	r25, Y+48	; 0x30
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f7       	brne	.-38     	; 0x1268 <LCD_displayCharacter+0xb4>
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1290:	69 a9       	ldd	r22, Y+49	; 0x31
    1292:	7a a9       	ldd	r23, Y+50	; 0x32
    1294:	8b a9       	ldd	r24, Y+51	; 0x33
    1296:	9c a9       	ldd	r25, Y+52	; 0x34
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	98 ab       	std	Y+48, r25	; 0x30
    12a2:	8f a7       	std	Y+47, r24	; 0x2f
    12a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    12a6:	98 a9       	ldd	r25, Y+48	; 0x30
    12a8:	9c a7       	std	Y+44, r25	; 0x2c
    12aa:	8b a7       	std	Y+43, r24	; 0x2b
    12ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    12ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <LCD_displayCharacter+0xfc>
    12b4:	9c a7       	std	Y+44, r25	; 0x2c
    12b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	61 e0       	ldi	r22, 0x01	; 1
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e8       	ldi	r26, 0x80	; 128
    12c8:	bf e3       	ldi	r27, 0x3F	; 63
    12ca:	8f a3       	std	Y+39, r24	; 0x27
    12cc:	98 a7       	std	Y+40, r25	; 0x28
    12ce:	a9 a7       	std	Y+41, r26	; 0x29
    12d0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d2:	6f a1       	ldd	r22, Y+39	; 0x27
    12d4:	78 a5       	ldd	r23, Y+40	; 0x28
    12d6:	89 a5       	ldd	r24, Y+41	; 0x29
    12d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	4a e7       	ldi	r20, 0x7A	; 122
    12e0:	53 e4       	ldi	r21, 0x43	; 67
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	8b a3       	std	Y+35, r24	; 0x23
    12ec:	9c a3       	std	Y+36, r25	; 0x24
    12ee:	ad a3       	std	Y+37, r26	; 0x25
    12f0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12f2:	6b a1       	ldd	r22, Y+35	; 0x23
    12f4:	7c a1       	ldd	r23, Y+36	; 0x24
    12f6:	8d a1       	ldd	r24, Y+37	; 0x25
    12f8:	9e a1       	ldd	r25, Y+38	; 0x26
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1306:	88 23       	and	r24, r24
    1308:	2c f4       	brge	.+10     	; 0x1314 <LCD_displayCharacter+0x160>
		__ticks = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9a a3       	std	Y+34, r25	; 0x22
    1310:	89 a3       	std	Y+33, r24	; 0x21
    1312:	3f c0       	rjmp	.+126    	; 0x1392 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1314:	6b a1       	ldd	r22, Y+35	; 0x23
    1316:	7c a1       	ldd	r23, Y+36	; 0x24
    1318:	8d a1       	ldd	r24, Y+37	; 0x25
    131a:	9e a1       	ldd	r25, Y+38	; 0x26
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	57 e4       	ldi	r21, 0x47	; 71
    1324:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1328:	18 16       	cp	r1, r24
    132a:	4c f5       	brge	.+82     	; 0x137e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	6f a1       	ldd	r22, Y+39	; 0x27
    132e:	78 a5       	ldd	r23, Y+40	; 0x28
    1330:	89 a5       	ldd	r24, Y+41	; 0x29
    1332:	9a a5       	ldd	r25, Y+42	; 0x2a
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9a a3       	std	Y+34, r25	; 0x22
    1352:	89 a3       	std	Y+33, r24	; 0x21
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <LCD_displayCharacter+0x1c0>
    1356:	89 e1       	ldi	r24, 0x19	; 25
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	98 a3       	std	Y+32, r25	; 0x20
    135c:	8f 8f       	std	Y+31, r24	; 0x1f
    135e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1360:	98 a1       	ldd	r25, Y+32	; 0x20
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <LCD_displayCharacter+0x1ae>
    1366:	98 a3       	std	Y+32, r25	; 0x20
    1368:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	89 a1       	ldd	r24, Y+33	; 0x21
    136c:	9a a1       	ldd	r25, Y+34	; 0x22
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9a a3       	std	Y+34, r25	; 0x22
    1372:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	89 a1       	ldd	r24, Y+33	; 0x21
    1376:	9a a1       	ldd	r25, Y+34	; 0x22
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <LCD_displayCharacter+0x1a2>
    137c:	14 c0       	rjmp	.+40     	; 0x13a6 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	6b a1       	ldd	r22, Y+35	; 0x23
    1380:	7c a1       	ldd	r23, Y+36	; 0x24
    1382:	8d a1       	ldd	r24, Y+37	; 0x25
    1384:	9e a1       	ldd	r25, Y+38	; 0x26
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9a a3       	std	Y+34, r25	; 0x22
    1390:	89 a3       	std	Y+33, r24	; 0x21
    1392:	89 a1       	ldd	r24, Y+33	; 0x21
    1394:	9a a1       	ldd	r25, Y+34	; 0x22
    1396:	9e 8f       	std	Y+30, r25	; 0x1e
    1398:	8d 8f       	std	Y+29, r24	; 0x1d
    139a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    139c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <LCD_displayCharacter+0x1ea>
    13a2:	9e 8f       	std	Y+30, r25	; 0x1e
    13a4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	69 ad       	ldd	r22, Y+57	; 0x39
    13aa:	0e 94 2c 11 	call	0x2258	; 0x2258 <GPIO_writePort>
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a0 e8       	ldi	r26, 0x80	; 128
    13b4:	bf e3       	ldi	r27, 0x3F	; 63
    13b6:	89 8f       	std	Y+25, r24	; 0x19
    13b8:	9a 8f       	std	Y+26, r25	; 0x1a
    13ba:	ab 8f       	std	Y+27, r26	; 0x1b
    13bc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13be:	69 8d       	ldd	r22, Y+25	; 0x19
    13c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	4a e7       	ldi	r20, 0x7A	; 122
    13cc:	53 e4       	ldi	r21, 0x43	; 67
    13ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	8d 8b       	std	Y+21, r24	; 0x15
    13d8:	9e 8b       	std	Y+22, r25	; 0x16
    13da:	af 8b       	std	Y+23, r26	; 0x17
    13dc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13de:	6d 89       	ldd	r22, Y+21	; 0x15
    13e0:	7e 89       	ldd	r23, Y+22	; 0x16
    13e2:	8f 89       	ldd	r24, Y+23	; 0x17
    13e4:	98 8d       	ldd	r25, Y+24	; 0x18
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    13f2:	88 23       	and	r24, r24
    13f4:	2c f4       	brge	.+10     	; 0x1400 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	9c 8b       	std	Y+20, r25	; 0x14
    13fc:	8b 8b       	std	Y+19, r24	; 0x13
    13fe:	3f c0       	rjmp	.+126    	; 0x147e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1400:	6d 89       	ldd	r22, Y+21	; 0x15
    1402:	7e 89       	ldd	r23, Y+22	; 0x16
    1404:	8f 89       	ldd	r24, Y+23	; 0x17
    1406:	98 8d       	ldd	r25, Y+24	; 0x18
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	3f ef       	ldi	r19, 0xFF	; 255
    140c:	4f e7       	ldi	r20, 0x7F	; 127
    140e:	57 e4       	ldi	r21, 0x47	; 71
    1410:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1414:	18 16       	cp	r1, r24
    1416:	4c f5       	brge	.+82     	; 0x146a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1418:	69 8d       	ldd	r22, Y+25	; 0x19
    141a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    141c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    141e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e2       	ldi	r20, 0x20	; 32
    1426:	51 e4       	ldi	r21, 0x41	; 65
    1428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    142c:	dc 01       	movw	r26, r24
    142e:	cb 01       	movw	r24, r22
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1438:	dc 01       	movw	r26, r24
    143a:	cb 01       	movw	r24, r22
    143c:	9c 8b       	std	Y+20, r25	; 0x14
    143e:	8b 8b       	std	Y+19, r24	; 0x13
    1440:	0f c0       	rjmp	.+30     	; 0x1460 <LCD_displayCharacter+0x2ac>
    1442:	89 e1       	ldi	r24, 0x19	; 25
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9a 8b       	std	Y+18, r25	; 0x12
    1448:	89 8b       	std	Y+17, r24	; 0x11
    144a:	89 89       	ldd	r24, Y+17	; 0x11
    144c:	9a 89       	ldd	r25, Y+18	; 0x12
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	f1 f7       	brne	.-4      	; 0x144e <LCD_displayCharacter+0x29a>
    1452:	9a 8b       	std	Y+18, r25	; 0x12
    1454:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1456:	8b 89       	ldd	r24, Y+19	; 0x13
    1458:	9c 89       	ldd	r25, Y+20	; 0x14
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	9c 8b       	std	Y+20, r25	; 0x14
    145e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1460:	8b 89       	ldd	r24, Y+19	; 0x13
    1462:	9c 89       	ldd	r25, Y+20	; 0x14
    1464:	00 97       	sbiw	r24, 0x00	; 0
    1466:	69 f7       	brne	.-38     	; 0x1442 <LCD_displayCharacter+0x28e>
    1468:	14 c0       	rjmp	.+40     	; 0x1492 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146a:	6d 89       	ldd	r22, Y+21	; 0x15
    146c:	7e 89       	ldd	r23, Y+22	; 0x16
    146e:	8f 89       	ldd	r24, Y+23	; 0x17
    1470:	98 8d       	ldd	r25, Y+24	; 0x18
    1472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	9c 8b       	std	Y+20, r25	; 0x14
    147c:	8b 8b       	std	Y+19, r24	; 0x13
    147e:	8b 89       	ldd	r24, Y+19	; 0x13
    1480:	9c 89       	ldd	r25, Y+20	; 0x14
    1482:	98 8b       	std	Y+16, r25	; 0x10
    1484:	8f 87       	std	Y+15, r24	; 0x0f
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <LCD_displayCharacter+0x2d6>
    148e:	98 8b       	std	Y+16, r25	; 0x10
    1490:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 e8       	ldi	r26, 0x80	; 128
    14a2:	bf e3       	ldi	r27, 0x3F	; 63
    14a4:	8b 87       	std	Y+11, r24	; 0x0b
    14a6:	9c 87       	std	Y+12, r25	; 0x0c
    14a8:	ad 87       	std	Y+13, r26	; 0x0d
    14aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	4a e7       	ldi	r20, 0x7A	; 122
    14ba:	53 e4       	ldi	r21, 0x43	; 67
    14bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	8f 83       	std	Y+7, r24	; 0x07
    14c6:	98 87       	std	Y+8, r25	; 0x08
    14c8:	a9 87       	std	Y+9, r26	; 0x09
    14ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14cc:	6f 81       	ldd	r22, Y+7	; 0x07
    14ce:	78 85       	ldd	r23, Y+8	; 0x08
    14d0:	89 85       	ldd	r24, Y+9	; 0x09
    14d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	2c f4       	brge	.+10     	; 0x14ee <LCD_displayCharacter+0x33a>
		__ticks = 1;
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9e 83       	std	Y+6, r25	; 0x06
    14ea:	8d 83       	std	Y+5, r24	; 0x05
    14ec:	3f c0       	rjmp	.+126    	; 0x156c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    14ee:	6f 81       	ldd	r22, Y+7	; 0x07
    14f0:	78 85       	ldd	r23, Y+8	; 0x08
    14f2:	89 85       	ldd	r24, Y+9	; 0x09
    14f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	3f ef       	ldi	r19, 0xFF	; 255
    14fa:	4f e7       	ldi	r20, 0x7F	; 127
    14fc:	57 e4       	ldi	r21, 0x47	; 71
    14fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1502:	18 16       	cp	r1, r24
    1504:	4c f5       	brge	.+82     	; 0x1558 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1506:	6b 85       	ldd	r22, Y+11	; 0x0b
    1508:	7c 85       	ldd	r23, Y+12	; 0x0c
    150a:	8d 85       	ldd	r24, Y+13	; 0x0d
    150c:	9e 85       	ldd	r25, Y+14	; 0x0e
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e2       	ldi	r20, 0x20	; 32
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	bc 01       	movw	r22, r24
    1520:	cd 01       	movw	r24, r26
    1522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	9e 83       	std	Y+6, r25	; 0x06
    152c:	8d 83       	std	Y+5, r24	; 0x05
    152e:	0f c0       	rjmp	.+30     	; 0x154e <LCD_displayCharacter+0x39a>
    1530:	89 e1       	ldi	r24, 0x19	; 25
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	9c 83       	std	Y+4, r25	; 0x04
    1536:	8b 83       	std	Y+3, r24	; 0x03
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	01 97       	sbiw	r24, 0x01	; 1
    153e:	f1 f7       	brne	.-4      	; 0x153c <LCD_displayCharacter+0x388>
    1540:	9c 83       	std	Y+4, r25	; 0x04
    1542:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1544:	8d 81       	ldd	r24, Y+5	; 0x05
    1546:	9e 81       	ldd	r25, Y+6	; 0x06
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	9e 83       	std	Y+6, r25	; 0x06
    154c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154e:	8d 81       	ldd	r24, Y+5	; 0x05
    1550:	9e 81       	ldd	r25, Y+6	; 0x06
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	69 f7       	brne	.-38     	; 0x1530 <LCD_displayCharacter+0x37c>
    1556:	14 c0       	rjmp	.+40     	; 0x1580 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	9a 83       	std	Y+2, r25	; 0x02
    1572:	89 83       	std	Y+1, r24	; 0x01
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	9a 81       	ldd	r25, Y+2	; 0x02
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <LCD_displayCharacter+0x3c4>
    157c:	9a 83       	std	Y+2, r25	; 0x02
    157e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1580:	e9 96       	adiw	r28, 0x39	; 57
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	00 d0       	rcall	.+0      	; 0x1598 <LCD_displayString+0x6>
    1598:	0f 92       	push	r0
    159a:	cd b7       	in	r28, 0x3d	; 61
    159c:	de b7       	in	r29, 0x3e	; 62
    159e:	9b 83       	std	Y+3, r25	; 0x03
    15a0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    15a2:	19 82       	std	Y+1, r1	; 0x01
    15a4:	0e c0       	rjmp	.+28     	; 0x15c2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	28 2f       	mov	r18, r24
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	fc 01       	movw	r30, r24
    15b2:	e2 0f       	add	r30, r18
    15b4:	f3 1f       	adc	r31, r19
    15b6:	80 81       	ld	r24, Z
    15b8:	0e 94 da 08 	call	0x11b4	; 0x11b4 <LCD_displayCharacter>
		i++;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01
    15be:	8f 5f       	subi	r24, 0xFF	; 255
    15c0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	28 2f       	mov	r18, r24
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ca:	9b 81       	ldd	r25, Y+3	; 0x03
    15cc:	fc 01       	movw	r30, r24
    15ce:	e2 0f       	add	r30, r18
    15d0:	f3 1f       	adc	r31, r19
    15d2:	80 81       	ld	r24, Z
    15d4:	88 23       	and	r24, r24
    15d6:	39 f7       	brne	.-50     	; 0x15a6 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <LCD_moveCursor+0x6>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <LCD_moveCursor+0x8>
    15ec:	0f 92       	push	r0
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	8a 83       	std	Y+2, r24	; 0x02
    15f4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3d 83       	std	Y+5, r19	; 0x05
    15fe:	2c 83       	std	Y+4, r18	; 0x04
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	c1 f0       	breq	.+48     	; 0x163a <LCD_moveCursor+0x56>
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <LCD_moveCursor+0x3a>
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 f0       	breq	.+24     	; 0x1634 <LCD_moveCursor+0x50>
    161c:	19 c0       	rjmp	.+50     	; 0x1650 <LCD_moveCursor+0x6c>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	69 f0       	breq	.+26     	; 0x1642 <LCD_moveCursor+0x5e>
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	61 f0       	breq	.+24     	; 0x164a <LCD_moveCursor+0x66>
    1632:	0e c0       	rjmp	.+28     	; 0x1650 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	89 83       	std	Y+1, r24	; 0x01
    1638:	0b c0       	rjmp	.+22     	; 0x1650 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	80 5c       	subi	r24, 0xC0	; 192
    163e:	89 83       	std	Y+1, r24	; 0x01
    1640:	07 c0       	rjmp	.+14     	; 0x1650 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	80 5f       	subi	r24, 0xF0	; 240
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	80 5b       	subi	r24, 0xB0	; 176
    164e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	80 68       	ori	r24, 0x80	; 128
    1654:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCD_sendCommand>
	/* ( 0x80 | address or 1000 0000 | address ) */
}
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	cf 91       	pop	r28
    1664:	df 91       	pop	r29
    1666:	08 95       	ret

00001668 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	00 d0       	rcall	.+0      	; 0x166e <LCD_displayStringRowColumn+0x6>
    166e:	00 d0       	rcall	.+0      	; 0x1670 <LCD_displayStringRowColumn+0x8>
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	6a 83       	std	Y+2, r22	; 0x02
    1678:	5c 83       	std	Y+4, r21	; 0x04
    167a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	6a 81       	ldd	r22, Y+2	; 0x02
    1680:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_moveCursor>

	LCD_displayString(Str); /* display the string */
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_displayString>
}
    168c:	0f 90       	pop	r0
    168e:	0f 90       	pop	r0
    1690:	0f 90       	pop	r0
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
    16a2:	62 97       	sbiw	r28, 0x12	; 18
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	de bf       	out	0x3e, r29	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	cd bf       	out	0x3d, r28	; 61
    16ae:	9a 8b       	std	Y+18, r25	; 0x12
    16b0:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */

   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    16b2:	89 89       	ldd	r24, Y+17	; 0x11
    16b4:	9a 89       	ldd	r25, Y+18	; 0x12
    16b6:	9e 01       	movw	r18, r28
    16b8:	2f 5f       	subi	r18, 0xFF	; 255
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	b9 01       	movw	r22, r18
    16be:	4a e0       	ldi	r20, 0x0A	; 10
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	0e 94 32 14 	call	0x2864	; 0x2864 <itoa>

   LCD_displayString(buff); /* Display the string */
    16c6:	ce 01       	movw	r24, r28
    16c8:	01 96       	adiw	r24, 0x01	; 1
    16ca:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_displayString>
}
    16ce:	62 96       	adiw	r28, 0x12	; 18
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <LCD_sendCommand>
}
    16ee:	cf 91       	pop	r28
    16f0:	df 91       	pop	r29
    16f2:	08 95       	ret

000016f4 <LCD_intgerToStringRowColumn>:
 * Description :
 * Display the required decimal value in a specified row and column index on the screen
 */

void LCD_intgerToStringRowColumn(uint8 row,uint8 col,int data)
{
    16f4:	df 93       	push	r29
    16f6:	cf 93       	push	r28
    16f8:	cd b7       	in	r28, 0x3d	; 61
    16fa:	de b7       	in	r29, 0x3e	; 62
    16fc:	64 97       	sbiw	r28, 0x14	; 20
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	89 8b       	std	Y+17, r24	; 0x11
    170a:	6a 8b       	std	Y+18, r22	; 0x12
    170c:	5c 8b       	std	Y+20, r21	; 0x14
    170e:	4b 8b       	std	Y+19, r20	; 0x13
   char buff[16]; /* String to hold the ascii result */

   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1710:	8b 89       	ldd	r24, Y+19	; 0x13
    1712:	9c 89       	ldd	r25, Y+20	; 0x14
    1714:	9e 01       	movw	r18, r28
    1716:	2f 5f       	subi	r18, 0xFF	; 255
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	b9 01       	movw	r22, r18
    171c:	4a e0       	ldi	r20, 0x0A	; 10
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	0e 94 32 14 	call	0x2864	; 0x2864 <itoa>

   LCD_moveCursor(row,col); /* go to to the required LCD position */
    1724:	89 89       	ldd	r24, Y+17	; 0x11
    1726:	6a 89       	ldd	r22, Y+18	; 0x12
    1728:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_moveCursor>

   LCD_displayString(buff); /* Display the string */
    172c:	ce 01       	movw	r24, r28
    172e:	01 96       	adiw	r24, 0x01	; 1
    1730:	0e 94 c9 0a 	call	0x1592	; 0x1592 <LCD_displayString>
}
    1734:	64 96       	adiw	r28, 0x14	; 20
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <LCD_displayCharacterRowColumn>:
/*
 * Description :
 * Display the required character in a specified row and column index on the screen
 */
void LCD_displayCharacterRowColumn(uint8 row,uint8 col,uint8 data)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	eb 97       	sbiw	r28, 0x3b	; 59
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	89 af       	std	Y+57, r24	; 0x39
    175c:	6a af       	std	Y+58, r22	; 0x3a
    175e:	4b af       	std	Y+59, r20	; 0x3b
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1760:	89 ad       	ldd	r24, Y+57	; 0x39
    1762:	6a ad       	ldd	r22, Y+58	; 0x3a
    1764:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <LCD_moveCursor>

	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8d ab       	std	Y+53, r24	; 0x35
    177c:	9e ab       	std	Y+54, r25	; 0x36
    177e:	af ab       	std	Y+55, r26	; 0x37
    1780:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6d a9       	ldd	r22, Y+53	; 0x35
    1784:	7e a9       	ldd	r23, Y+54	; 0x36
    1786:	8f a9       	ldd	r24, Y+55	; 0x37
    1788:	98 ad       	ldd	r25, Y+56	; 0x38
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a e7       	ldi	r20, 0x7A	; 122
    1790:	53 e4       	ldi	r21, 0x43	; 67
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	89 ab       	std	Y+49, r24	; 0x31
    179c:	9a ab       	std	Y+50, r25	; 0x32
    179e:	ab ab       	std	Y+51, r26	; 0x33
    17a0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17a2:	69 a9       	ldd	r22, Y+49	; 0x31
    17a4:	7a a9       	ldd	r23, Y+50	; 0x32
    17a6:	8b a9       	ldd	r24, Y+51	; 0x33
    17a8:	9c a9       	ldd	r25, Y+52	; 0x34
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <LCD_displayCharacterRowColumn+0x7e>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	98 ab       	std	Y+48, r25	; 0x30
    17c0:	8f a7       	std	Y+47, r24	; 0x2f
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <LCD_displayCharacterRowColumn+0xfc>
	else if (__tmp > 65535)
    17c4:	69 a9       	ldd	r22, Y+49	; 0x31
    17c6:	7a a9       	ldd	r23, Y+50	; 0x32
    17c8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ca:	9c a9       	ldd	r25, Y+52	; 0x34
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <LCD_displayCharacterRowColumn+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6d a9       	ldd	r22, Y+53	; 0x35
    17de:	7e a9       	ldd	r23, Y+54	; 0x36
    17e0:	8f a9       	ldd	r24, Y+55	; 0x37
    17e2:	98 ad       	ldd	r25, Y+56	; 0x38
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	98 ab       	std	Y+48, r25	; 0x30
    1802:	8f a7       	std	Y+47, r24	; 0x2f
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <LCD_displayCharacterRowColumn+0xde>
    1806:	89 e1       	ldi	r24, 0x19	; 25
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9e a7       	std	Y+46, r25	; 0x2e
    180c:	8d a7       	std	Y+45, r24	; 0x2d
    180e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1810:	9e a5       	ldd	r25, Y+46	; 0x2e
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_displayCharacterRowColumn+0xcc>
    1816:	9e a7       	std	Y+46, r25	; 0x2e
    1818:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	8f a5       	ldd	r24, Y+47	; 0x2f
    181c:	98 a9       	ldd	r25, Y+48	; 0x30
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	98 ab       	std	Y+48, r25	; 0x30
    1822:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	8f a5       	ldd	r24, Y+47	; 0x2f
    1826:	98 a9       	ldd	r25, Y+48	; 0x30
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <LCD_displayCharacterRowColumn+0xc0>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <LCD_displayCharacterRowColumn+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	69 a9       	ldd	r22, Y+49	; 0x31
    1830:	7a a9       	ldd	r23, Y+50	; 0x32
    1832:	8b a9       	ldd	r24, Y+51	; 0x33
    1834:	9c a9       	ldd	r25, Y+52	; 0x34
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	98 ab       	std	Y+48, r25	; 0x30
    1840:	8f a7       	std	Y+47, r24	; 0x2f
    1842:	8f a5       	ldd	r24, Y+47	; 0x2f
    1844:	98 a9       	ldd	r25, Y+48	; 0x30
    1846:	9c a7       	std	Y+44, r25	; 0x2c
    1848:	8b a7       	std	Y+43, r24	; 0x2b
    184a:	8b a5       	ldd	r24, Y+43	; 0x2b
    184c:	9c a5       	ldd	r25, Y+44	; 0x2c
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_displayCharacterRowColumn+0x108>
    1852:	9c a7       	std	Y+44, r25	; 0x2c
    1854:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	41 e0       	ldi	r20, 0x01	; 1
    185c:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a0 e8       	ldi	r26, 0x80	; 128
    1866:	bf e3       	ldi	r27, 0x3F	; 63
    1868:	8f a3       	std	Y+39, r24	; 0x27
    186a:	98 a7       	std	Y+40, r25	; 0x28
    186c:	a9 a7       	std	Y+41, r26	; 0x29
    186e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1870:	6f a1       	ldd	r22, Y+39	; 0x27
    1872:	78 a5       	ldd	r23, Y+40	; 0x28
    1874:	89 a5       	ldd	r24, Y+41	; 0x29
    1876:	9a a5       	ldd	r25, Y+42	; 0x2a
    1878:	20 e0       	ldi	r18, 0x00	; 0
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	4a e7       	ldi	r20, 0x7A	; 122
    187e:	53 e4       	ldi	r21, 0x43	; 67
    1880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1884:	dc 01       	movw	r26, r24
    1886:	cb 01       	movw	r24, r22
    1888:	8b a3       	std	Y+35, r24	; 0x23
    188a:	9c a3       	std	Y+36, r25	; 0x24
    188c:	ad a3       	std	Y+37, r26	; 0x25
    188e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1890:	6b a1       	ldd	r22, Y+35	; 0x23
    1892:	7c a1       	ldd	r23, Y+36	; 0x24
    1894:	8d a1       	ldd	r24, Y+37	; 0x25
    1896:	9e a1       	ldd	r25, Y+38	; 0x26
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5f e3       	ldi	r21, 0x3F	; 63
    18a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18a4:	88 23       	and	r24, r24
    18a6:	2c f4       	brge	.+10     	; 0x18b2 <LCD_displayCharacterRowColumn+0x16c>
		__ticks = 1;
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	9a a3       	std	Y+34, r25	; 0x22
    18ae:	89 a3       	std	Y+33, r24	; 0x21
    18b0:	3f c0       	rjmp	.+126    	; 0x1930 <LCD_displayCharacterRowColumn+0x1ea>
	else if (__tmp > 65535)
    18b2:	6b a1       	ldd	r22, Y+35	; 0x23
    18b4:	7c a1       	ldd	r23, Y+36	; 0x24
    18b6:	8d a1       	ldd	r24, Y+37	; 0x25
    18b8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	3f ef       	ldi	r19, 0xFF	; 255
    18be:	4f e7       	ldi	r20, 0x7F	; 127
    18c0:	57 e4       	ldi	r21, 0x47	; 71
    18c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18c6:	18 16       	cp	r1, r24
    18c8:	4c f5       	brge	.+82     	; 0x191c <LCD_displayCharacterRowColumn+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ca:	6f a1       	ldd	r22, Y+39	; 0x27
    18cc:	78 a5       	ldd	r23, Y+40	; 0x28
    18ce:	89 a5       	ldd	r24, Y+41	; 0x29
    18d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e2       	ldi	r20, 0x20	; 32
    18d8:	51 e4       	ldi	r21, 0x41	; 65
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	bc 01       	movw	r22, r24
    18e4:	cd 01       	movw	r24, r26
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	9a a3       	std	Y+34, r25	; 0x22
    18f0:	89 a3       	std	Y+33, r24	; 0x21
    18f2:	0f c0       	rjmp	.+30     	; 0x1912 <LCD_displayCharacterRowColumn+0x1cc>
    18f4:	89 e1       	ldi	r24, 0x19	; 25
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	98 a3       	std	Y+32, r25	; 0x20
    18fa:	8f 8f       	std	Y+31, r24	; 0x1f
    18fc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18fe:	98 a1       	ldd	r25, Y+32	; 0x20
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	f1 f7       	brne	.-4      	; 0x1900 <LCD_displayCharacterRowColumn+0x1ba>
    1904:	98 a3       	std	Y+32, r25	; 0x20
    1906:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1908:	89 a1       	ldd	r24, Y+33	; 0x21
    190a:	9a a1       	ldd	r25, Y+34	; 0x22
    190c:	01 97       	sbiw	r24, 0x01	; 1
    190e:	9a a3       	std	Y+34, r25	; 0x22
    1910:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1912:	89 a1       	ldd	r24, Y+33	; 0x21
    1914:	9a a1       	ldd	r25, Y+34	; 0x22
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	69 f7       	brne	.-38     	; 0x18f4 <LCD_displayCharacterRowColumn+0x1ae>
    191a:	14 c0       	rjmp	.+40     	; 0x1944 <LCD_displayCharacterRowColumn+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	6b a1       	ldd	r22, Y+35	; 0x23
    191e:	7c a1       	ldd	r23, Y+36	; 0x24
    1920:	8d a1       	ldd	r24, Y+37	; 0x25
    1922:	9e a1       	ldd	r25, Y+38	; 0x26
    1924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1928:	dc 01       	movw	r26, r24
    192a:	cb 01       	movw	r24, r22
    192c:	9a a3       	std	Y+34, r25	; 0x22
    192e:	89 a3       	std	Y+33, r24	; 0x21
    1930:	89 a1       	ldd	r24, Y+33	; 0x21
    1932:	9a a1       	ldd	r25, Y+34	; 0x22
    1934:	9e 8f       	std	Y+30, r25	; 0x1e
    1936:	8d 8f       	std	Y+29, r24	; 0x1d
    1938:	8d 8d       	ldd	r24, Y+29	; 0x1d
    193a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    193c:	01 97       	sbiw	r24, 0x01	; 1
    193e:	f1 f7       	brne	.-4      	; 0x193c <LCD_displayCharacterRowColumn+0x1f6>
    1940:	9e 8f       	std	Y+30, r25	; 0x1e
    1942:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	6b ad       	ldd	r22, Y+59	; 0x3b
    1948:	0e 94 2c 11 	call	0x2258	; 0x2258 <GPIO_writePort>
    194c:	80 e0       	ldi	r24, 0x00	; 0
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a0 e8       	ldi	r26, 0x80	; 128
    1952:	bf e3       	ldi	r27, 0x3F	; 63
    1954:	89 8f       	std	Y+25, r24	; 0x19
    1956:	9a 8f       	std	Y+26, r25	; 0x1a
    1958:	ab 8f       	std	Y+27, r26	; 0x1b
    195a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195c:	69 8d       	ldd	r22, Y+25	; 0x19
    195e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1960:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1962:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	30 e0       	ldi	r19, 0x00	; 0
    1968:	4a e7       	ldi	r20, 0x7A	; 122
    196a:	53 e4       	ldi	r21, 0x43	; 67
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	8d 8b       	std	Y+21, r24	; 0x15
    1976:	9e 8b       	std	Y+22, r25	; 0x16
    1978:	af 8b       	std	Y+23, r26	; 0x17
    197a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    197c:	6d 89       	ldd	r22, Y+21	; 0x15
    197e:	7e 89       	ldd	r23, Y+22	; 0x16
    1980:	8f 89       	ldd	r24, Y+23	; 0x17
    1982:	98 8d       	ldd	r25, Y+24	; 0x18
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e8       	ldi	r20, 0x80	; 128
    198a:	5f e3       	ldi	r21, 0x3F	; 63
    198c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1990:	88 23       	and	r24, r24
    1992:	2c f4       	brge	.+10     	; 0x199e <LCD_displayCharacterRowColumn+0x258>
		__ticks = 1;
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9c 8b       	std	Y+20, r25	; 0x14
    199a:	8b 8b       	std	Y+19, r24	; 0x13
    199c:	3f c0       	rjmp	.+126    	; 0x1a1c <LCD_displayCharacterRowColumn+0x2d6>
	else if (__tmp > 65535)
    199e:	6d 89       	ldd	r22, Y+21	; 0x15
    19a0:	7e 89       	ldd	r23, Y+22	; 0x16
    19a2:	8f 89       	ldd	r24, Y+23	; 0x17
    19a4:	98 8d       	ldd	r25, Y+24	; 0x18
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	3f ef       	ldi	r19, 0xFF	; 255
    19aa:	4f e7       	ldi	r20, 0x7F	; 127
    19ac:	57 e4       	ldi	r21, 0x47	; 71
    19ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b2:	18 16       	cp	r1, r24
    19b4:	4c f5       	brge	.+82     	; 0x1a08 <LCD_displayCharacterRowColumn+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b6:	69 8d       	ldd	r22, Y+25	; 0x19
    19b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e2       	ldi	r20, 0x20	; 32
    19c4:	51 e4       	ldi	r21, 0x41	; 65
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	9c 8b       	std	Y+20, r25	; 0x14
    19dc:	8b 8b       	std	Y+19, r24	; 0x13
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <LCD_displayCharacterRowColumn+0x2b8>
    19e0:	89 e1       	ldi	r24, 0x19	; 25
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	9a 8b       	std	Y+18, r25	; 0x12
    19e6:	89 8b       	std	Y+17, r24	; 0x11
    19e8:	89 89       	ldd	r24, Y+17	; 0x11
    19ea:	9a 89       	ldd	r25, Y+18	; 0x12
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_displayCharacterRowColumn+0x2a6>
    19f0:	9a 8b       	std	Y+18, r25	; 0x12
    19f2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f4:	8b 89       	ldd	r24, Y+19	; 0x13
    19f6:	9c 89       	ldd	r25, Y+20	; 0x14
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	9c 8b       	std	Y+20, r25	; 0x14
    19fc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1a00:	9c 89       	ldd	r25, Y+20	; 0x14
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	69 f7       	brne	.-38     	; 0x19e0 <LCD_displayCharacterRowColumn+0x29a>
    1a06:	14 c0       	rjmp	.+40     	; 0x1a30 <LCD_displayCharacterRowColumn+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a08:	6d 89       	ldd	r22, Y+21	; 0x15
    1a0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	9c 8b       	std	Y+20, r25	; 0x14
    1a1a:	8b 8b       	std	Y+19, r24	; 0x13
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	98 8b       	std	Y+16, r25	; 0x10
    1a22:	8f 87       	std	Y+15, r24	; 0x0f
    1a24:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a26:	98 89       	ldd	r25, Y+16	; 0x10
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_displayCharacterRowColumn+0x2e2>
    1a2c:	98 8b       	std	Y+16, r25	; 0x10
    1a2e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */

	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	40 e0       	ldi	r20, 0x00	; 0
    1a36:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <GPIO_writePin>
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e8       	ldi	r26, 0x80	; 128
    1a40:	bf e3       	ldi	r27, 0x3F	; 63
    1a42:	8b 87       	std	Y+11, r24	; 0x0b
    1a44:	9c 87       	std	Y+12, r25	; 0x0c
    1a46:	ad 87       	std	Y+13, r26	; 0x0d
    1a48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	4a e7       	ldi	r20, 0x7A	; 122
    1a58:	53 e4       	ldi	r21, 0x43	; 67
    1a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	8f 83       	std	Y+7, r24	; 0x07
    1a64:	98 87       	std	Y+8, r25	; 0x08
    1a66:	a9 87       	std	Y+9, r26	; 0x09
    1a68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6c:	78 85       	ldd	r23, Y+8	; 0x08
    1a6e:	89 85       	ldd	r24, Y+9	; 0x09
    1a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <LCD_displayCharacterRowColumn+0x346>
		__ticks = 1;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	3f c0       	rjmp	.+126    	; 0x1b0a <LCD_displayCharacterRowColumn+0x3c4>
	else if (__tmp > 65535)
    1a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8e:	78 85       	ldd	r23, Y+8	; 0x08
    1a90:	89 85       	ldd	r24, Y+9	; 0x09
    1a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	3f ef       	ldi	r19, 0xFF	; 255
    1a98:	4f e7       	ldi	r20, 0x7F	; 127
    1a9a:	57 e4       	ldi	r21, 0x47	; 71
    1a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa0:	18 16       	cp	r1, r24
    1aa2:	4c f5       	brge	.+82     	; 0x1af6 <LCD_displayCharacterRowColumn+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_displayCharacterRowColumn+0x3a6>
    1ace:	89 e1       	ldi	r24, 0x19	; 25
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_displayCharacterRowColumn+0x394>
    1ade:	9c 83       	std	Y+4, r25	; 0x04
    1ae0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8d 81       	ldd	r24, Y+5	; 0x05
    1aee:	9e 81       	ldd	r25, Y+6	; 0x06
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_displayCharacterRowColumn+0x388>
    1af4:	14 c0       	rjmp	.+40     	; 0x1b1e <LCD_displayCharacterRowColumn+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	6f 81       	ldd	r22, Y+7	; 0x07
    1af8:	78 85       	ldd	r23, Y+8	; 0x08
    1afa:	89 85       	ldd	r24, Y+9	; 0x09
    1afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e 83       	std	Y+6, r25	; 0x06
    1b08:	8d 83       	std	Y+5, r24	; 0x05
    1b0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_displayCharacterRowColumn+0x3d0>
    1b1a:	9a 83       	std	Y+2, r25	; 0x02
    1b1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1b1e:	eb 96       	adiw	r28, 0x3b	; 59
    1b20:	0f b6       	in	r0, 0x3f	; 63
    1b22:	f8 94       	cli
    1b24:	de bf       	out	0x3e, r29	; 62
    1b26:	0f be       	out	0x3f, r0	; 63
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <__vector_7>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

/************************Interrupt Service Routines*****************/

ISR(TIMER1_COMPA_vect)
{
    1b30:	1f 92       	push	r1
    1b32:	0f 92       	push	r0
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	0f 92       	push	r0
    1b38:	11 24       	eor	r1, r1
    1b3a:	2f 93       	push	r18
    1b3c:	3f 93       	push	r19
    1b3e:	4f 93       	push	r20
    1b40:	5f 93       	push	r21
    1b42:	6f 93       	push	r22
    1b44:	7f 93       	push	r23
    1b46:	8f 93       	push	r24
    1b48:	9f 93       	push	r25
    1b4a:	af 93       	push	r26
    1b4c:	bf 93       	push	r27
    1b4e:	ef 93       	push	r30
    1b50:	ff 93       	push	r31
    1b52:	df 93       	push	r29
    1b54:	cf 93       	push	r28
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1b5a:	80 91 6e 00 	lds	r24, 0x006E
    1b5e:	90 91 6f 00 	lds	r25, 0x006F
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	29 f0       	breq	.+10     	; 0x1b70 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b66:	e0 91 6e 00 	lds	r30, 0x006E
    1b6a:	f0 91 6f 00 	lds	r31, 0x006F
    1b6e:	09 95       	icall
	}
}
    1b70:	cf 91       	pop	r28
    1b72:	df 91       	pop	r29
    1b74:	ff 91       	pop	r31
    1b76:	ef 91       	pop	r30
    1b78:	bf 91       	pop	r27
    1b7a:	af 91       	pop	r26
    1b7c:	9f 91       	pop	r25
    1b7e:	8f 91       	pop	r24
    1b80:	7f 91       	pop	r23
    1b82:	6f 91       	pop	r22
    1b84:	5f 91       	pop	r21
    1b86:	4f 91       	pop	r20
    1b88:	3f 91       	pop	r19
    1b8a:	2f 91       	pop	r18
    1b8c:	0f 90       	pop	r0
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	0f 90       	pop	r0
    1b92:	1f 90       	pop	r1
    1b94:	18 95       	reti

00001b96 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	2f 93       	push	r18
    1ba2:	3f 93       	push	r19
    1ba4:	4f 93       	push	r20
    1ba6:	5f 93       	push	r21
    1ba8:	6f 93       	push	r22
    1baa:	7f 93       	push	r23
    1bac:	8f 93       	push	r24
    1bae:	9f 93       	push	r25
    1bb0:	af 93       	push	r26
    1bb2:	bf 93       	push	r27
    1bb4:	ef 93       	push	r30
    1bb6:	ff 93       	push	r31
    1bb8:	df 93       	push	r29
    1bba:	cf 93       	push	r28
    1bbc:	cd b7       	in	r28, 0x3d	; 61
    1bbe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1bc0:	80 91 6e 00 	lds	r24, 0x006E
    1bc4:	90 91 6f 00 	lds	r25, 0x006F
    1bc8:	00 97       	sbiw	r24, 0x00	; 0
    1bca:	29 f0       	breq	.+10     	; 0x1bd6 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1bcc:	e0 91 6e 00 	lds	r30, 0x006E
    1bd0:	f0 91 6f 00 	lds	r31, 0x006F
    1bd4:	09 95       	icall
	}
}
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <Timer1_init>:
 * 3. Setup the Timer1 initial value .
 * 4. enable the interrupt module .
 * 5. Setup the Timer1 compare value ( in compare mode only ) .
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <Timer1_init+0x6>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    1c0a:	ef e4       	ldi	r30, 0x4F	; 79
    1c0c:	f0 e0       	ldi	r31, 0x00	; 0
    1c0e:	8c e0       	ldi	r24, 0x0C	; 12
    1c10:	80 83       	st	Z, r24
	/* for  non-PWM mode */

	TCCR1B = ( ( Config_Ptr->mode & 0x0C )<<1) | (Config_Ptr->prescaler);
    1c12:	ae e4       	ldi	r26, 0x4E	; 78
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e9 81       	ldd	r30, Y+1	; 0x01
    1c18:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1a:	85 81       	ldd	r24, Z+5	; 0x05
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	8c 70       	andi	r24, 0x0C	; 12
    1c22:	90 70       	andi	r25, 0x00	; 0
    1c24:	88 0f       	add	r24, r24
    1c26:	99 1f       	adc	r25, r25
    1c28:	98 2f       	mov	r25, r24
    1c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2e:	84 81       	ldd	r24, Z+4	; 0x04
    1c30:	89 2b       	or	r24, r25
    1c32:	8c 93       	st	X, r24
	 * shift left by 1 to put them in WGM12 & WGM13 mode bits .
	 *
	 * 2. then set the prescaler .
	 */

	TCNT1 = Config_Ptr->initial_value;
    1c34:	ac e4       	ldi	r26, 0x4C	; 76
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3c:	80 81       	ld	r24, Z
    1c3e:	91 81       	ldd	r25, Z+1	; 0x01
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	9c 93       	st	X, r25
    1c44:	8e 93       	st	-X, r24

	if( Config_Ptr->mode == TIMER1_CTC_MODE )
    1c46:	e9 81       	ldd	r30, Y+1	; 0x01
    1c48:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4a:	85 81       	ldd	r24, Z+5	; 0x05
    1c4c:	84 30       	cpi	r24, 0x04	; 4
    1c4e:	89 f4       	brne	.+34     	; 0x1c72 <Timer1_init+0x76>
	{
		OCR1A = Config_Ptr->compare_value;
    1c50:	aa e4       	ldi	r26, 0x4A	; 74
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e9 81       	ldd	r30, Y+1	; 0x01
    1c56:	fa 81       	ldd	r31, Y+2	; 0x02
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	93 81       	ldd	r25, Z+3	; 0x03
    1c5c:	11 96       	adiw	r26, 0x01	; 1
    1c5e:	9c 93       	st	X, r25
    1c60:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    1c62:	a9 e5       	ldi	r26, 0x59	; 89
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e9 e5       	ldi	r30, 0x59	; 89
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 61       	ori	r24, 0x10	; 16
    1c6e:	8c 93       	st	X, r24
    1c70:	07 c0       	rjmp	.+14     	; 0x1c80 <Timer1_init+0x84>
	 * 2. Compare interrupt module enabled .
	 */

	else
	{
		TIMSK |= (1<<TOIE1);
    1c72:	a9 e5       	ldi	r26, 0x59	; 89
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e9 e5       	ldi	r30, 0x59	; 89
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	84 60       	ori	r24, 0x04	; 4
    1c7e:	8c 93       	st	X, r24
	}
	/* ( if normal mode ON )
	 *  normal interrupt module enabled .
	 */
}
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <Timer1_deInit>:
 * 1. Clear all Timer1 registers .
 * 2. disable the interrupt module .
 * 3. Reset the global pointer value .
 */
void Timer1_deInit(void)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62

	TCCR1A = 0;
    1c92:	ef e4       	ldi	r30, 0x4F	; 79
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	10 82       	st	Z, r1
	TCCR1B = 0;
    1c98:	ee e4       	ldi	r30, 0x4E	; 78
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	10 82       	st	Z, r1
	TCNT1 = 0;
    1c9e:	ec e4       	ldi	r30, 0x4C	; 76
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	11 82       	std	Z+1, r1	; 0x01
    1ca4:	10 82       	st	Z, r1
	/* Clear all Timer1 registers . */

	TIMSK &= ~(1<<TOIE1) & ~(1<<OCIE1A);
    1ca6:	a9 e5       	ldi	r26, 0x59	; 89
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	e9 e5       	ldi	r30, 0x59	; 89
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8b 7e       	andi	r24, 0xEB	; 235
    1cb2:	8c 93       	st	X, r24
	/* Compare and normal interrupt modules disabled . */

	g_callBackPtr = NULL_PTR;
    1cb4:	10 92 6f 00 	sts	0x006F, r1
    1cb8:	10 92 6e 00 	sts	0x006E, r1
	/* Reset the global pointer value . */
}
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <Timer1_setCallBack+0x6>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
    1ccc:	9a 83       	std	Y+2, r25	; 0x02
    1cce:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd4:	90 93 6f 00 	sts	0x006F, r25
    1cd8:	80 93 6e 00 	sts	0x006E, r24
	/* Save the address of the Call back function in a global variable */
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	00 d0       	rcall	.+0      	; 0x1cec <GPIO_setupPinDirection+0x6>
    1cec:	00 d0       	rcall	.+0      	; 0x1cee <GPIO_setupPinDirection+0x8>
    1cee:	0f 92       	push	r0
    1cf0:	cd b7       	in	r28, 0x3d	; 61
    1cf2:	de b7       	in	r29, 0x3e	; 62
    1cf4:	89 83       	std	Y+1, r24	; 0x01
    1cf6:	6a 83       	std	Y+2, r22	; 0x02
    1cf8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	88 30       	cpi	r24, 0x08	; 8
    1cfe:	08 f0       	brcs	.+2      	; 0x1d02 <GPIO_setupPinDirection+0x1c>
    1d00:	d5 c0       	rjmp	.+426    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
    1d02:	89 81       	ldd	r24, Y+1	; 0x01
    1d04:	84 30       	cpi	r24, 0x04	; 4
    1d06:	08 f0       	brcs	.+2      	; 0x1d0a <GPIO_setupPinDirection+0x24>
    1d08:	d1 c0       	rjmp	.+418    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	28 2f       	mov	r18, r24
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	3d 83       	std	Y+5, r19	; 0x05
    1d12:	2c 83       	std	Y+4, r18	; 0x04
    1d14:	8c 81       	ldd	r24, Y+4	; 0x04
    1d16:	9d 81       	ldd	r25, Y+5	; 0x05
    1d18:	81 30       	cpi	r24, 0x01	; 1
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <GPIO_setupPinDirection+0x3a>
    1d1e:	43 c0       	rjmp	.+134    	; 0x1da6 <GPIO_setupPinDirection+0xc0>
    1d20:	2c 81       	ldd	r18, Y+4	; 0x04
    1d22:	3d 81       	ldd	r19, Y+5	; 0x05
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <GPIO_setupPinDirection+0x4e>
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	71 f0       	breq	.+28     	; 0x1d4e <GPIO_setupPinDirection+0x68>
    1d32:	bc c0       	rjmp	.+376    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
    1d34:	2c 81       	ldd	r18, Y+4	; 0x04
    1d36:	3d 81       	ldd	r19, Y+5	; 0x05
    1d38:	22 30       	cpi	r18, 0x02	; 2
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <GPIO_setupPinDirection+0x5a>
    1d3e:	5f c0       	rjmp	.+190    	; 0x1dfe <GPIO_setupPinDirection+0x118>
    1d40:	8c 81       	ldd	r24, Y+4	; 0x04
    1d42:	9d 81       	ldd	r25, Y+5	; 0x05
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	91 05       	cpc	r25, r1
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <GPIO_setupPinDirection+0x66>
    1d4a:	85 c0       	rjmp	.+266    	; 0x1e56 <GPIO_setupPinDirection+0x170>
    1d4c:	af c0       	rjmp	.+350    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	a1 f4       	brne	.+40     	; 0x1d7c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1d54:	aa e3       	ldi	r26, 0x3A	; 58
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	ea e3       	ldi	r30, 0x3A	; 58
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8a 81       	ldd	r24, Y+2	; 0x02
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <GPIO_setupPinDirection+0x8c>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <GPIO_setupPinDirection+0x88>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	98 c0       	rjmp	.+304    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1d7c:	aa e3       	ldi	r26, 0x3A	; 58
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	ea e3       	ldi	r30, 0x3A	; 58
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <GPIO_setupPinDirection+0xb4>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <GPIO_setupPinDirection+0xb0>
    1d9e:	80 95       	com	r24
    1da0:	84 23       	and	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	83 c0       	rjmp	.+262    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	81 30       	cpi	r24, 0x01	; 1
    1daa:	a1 f4       	brne	.+40     	; 0x1dd4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1dac:	a7 e3       	ldi	r26, 0x37	; 55
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	e7 e3       	ldi	r30, 0x37	; 55
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	48 2f       	mov	r20, r24
    1db8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dba:	28 2f       	mov	r18, r24
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	02 2e       	mov	r0, r18
    1dc4:	02 c0       	rjmp	.+4      	; 0x1dca <GPIO_setupPinDirection+0xe4>
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	0a 94       	dec	r0
    1dcc:	e2 f7       	brpl	.-8      	; 0x1dc6 <GPIO_setupPinDirection+0xe0>
    1dce:	84 2b       	or	r24, r20
    1dd0:	8c 93       	st	X, r24
    1dd2:	6c c0       	rjmp	.+216    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1dd4:	a7 e3       	ldi	r26, 0x37	; 55
    1dd6:	b0 e0       	ldi	r27, 0x00	; 0
    1dd8:	e7 e3       	ldi	r30, 0x37	; 55
    1dda:	f0 e0       	ldi	r31, 0x00	; 0
    1ddc:	80 81       	ld	r24, Z
    1dde:	48 2f       	mov	r20, r24
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	02 2e       	mov	r0, r18
    1dec:	02 c0       	rjmp	.+4      	; 0x1df2 <GPIO_setupPinDirection+0x10c>
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	0a 94       	dec	r0
    1df4:	e2 f7       	brpl	.-8      	; 0x1dee <GPIO_setupPinDirection+0x108>
    1df6:	80 95       	com	r24
    1df8:	84 23       	and	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	57 c0       	rjmp	.+174    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	81 30       	cpi	r24, 0x01	; 1
    1e02:	a1 f4       	brne	.+40     	; 0x1e2c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1e04:	a4 e3       	ldi	r26, 0x34	; 52
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e4 e3       	ldi	r30, 0x34	; 52
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <GPIO_setupPinDirection+0x13c>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <GPIO_setupPinDirection+0x138>
    1e26:	84 2b       	or	r24, r20
    1e28:	8c 93       	st	X, r24
    1e2a:	40 c0       	rjmp	.+128    	; 0x1eac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1e2c:	a4 e3       	ldi	r26, 0x34	; 52
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e4 e3       	ldi	r30, 0x34	; 52
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	48 2f       	mov	r20, r24
    1e38:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	30 e0       	ldi	r19, 0x00	; 0
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	02 2e       	mov	r0, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <GPIO_setupPinDirection+0x164>
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	0a 94       	dec	r0
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <GPIO_setupPinDirection+0x160>
    1e4e:	80 95       	com	r24
    1e50:	84 23       	and	r24, r20
    1e52:	8c 93       	st	X, r24
    1e54:	2b c0       	rjmp	.+86     	; 0x1eac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	81 30       	cpi	r24, 0x01	; 1
    1e5a:	a1 f4       	brne	.+40     	; 0x1e84 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1e5c:	a1 e3       	ldi	r26, 0x31	; 49
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e1 e3       	ldi	r30, 0x31	; 49
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 81       	ld	r24, Z
    1e66:	48 2f       	mov	r20, r24
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	28 2f       	mov	r18, r24
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <GPIO_setupPinDirection+0x194>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <GPIO_setupPinDirection+0x190>
    1e7e:	84 2b       	or	r24, r20
    1e80:	8c 93       	st	X, r24
    1e82:	14 c0       	rjmp	.+40     	; 0x1eac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1e84:	a1 e3       	ldi	r26, 0x31	; 49
    1e86:	b0 e0       	ldi	r27, 0x00	; 0
    1e88:	e1 e3       	ldi	r30, 0x31	; 49
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	48 2f       	mov	r20, r24
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	28 2f       	mov	r18, r24
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	02 2e       	mov	r0, r18
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <GPIO_setupPinDirection+0x1bc>
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	0a 94       	dec	r0
    1ea4:	e2 f7       	brpl	.-8      	; 0x1e9e <GPIO_setupPinDirection+0x1b8>
    1ea6:	80 95       	com	r24
    1ea8:	84 23       	and	r24, r20
    1eaa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <GPIO_writePin+0x6>
    1ec2:	00 d0       	rcall	.+0      	; 0x1ec4 <GPIO_writePin+0x8>
    1ec4:	0f 92       	push	r0
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	89 83       	std	Y+1, r24	; 0x01
    1ecc:	6a 83       	std	Y+2, r22	; 0x02
    1ece:	4b 83       	std	Y+3, r20	; 0x03

	if( (pin_num >= NUM_OF_PINS_PER_PORT) || ( port_num >= NUM_OF_PORTS) )
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	88 30       	cpi	r24, 0x08	; 8
    1ed4:	08 f0       	brcs	.+2      	; 0x1ed8 <GPIO_writePin+0x1c>
    1ed6:	d5 c0       	rjmp	.+426    	; 0x2082 <GPIO_writePin+0x1c6>
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	08 f0       	brcs	.+2      	; 0x1ee0 <GPIO_writePin+0x24>
    1ede:	d1 c0       	rjmp	.+418    	; 0x2082 <GPIO_writePin+0x1c6>
	{
	}

	else
	{
		switch(port_num)
    1ee0:	89 81       	ldd	r24, Y+1	; 0x01
    1ee2:	28 2f       	mov	r18, r24
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	3d 83       	std	Y+5, r19	; 0x05
    1ee8:	2c 83       	std	Y+4, r18	; 0x04
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	81 30       	cpi	r24, 0x01	; 1
    1ef0:	91 05       	cpc	r25, r1
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <GPIO_writePin+0x3a>
    1ef4:	43 c0       	rjmp	.+134    	; 0x1f7c <GPIO_writePin+0xc0>
    1ef6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ef8:	3d 81       	ldd	r19, Y+5	; 0x05
    1efa:	22 30       	cpi	r18, 0x02	; 2
    1efc:	31 05       	cpc	r19, r1
    1efe:	2c f4       	brge	.+10     	; 0x1f0a <GPIO_writePin+0x4e>
    1f00:	8c 81       	ldd	r24, Y+4	; 0x04
    1f02:	9d 81       	ldd	r25, Y+5	; 0x05
    1f04:	00 97       	sbiw	r24, 0x00	; 0
    1f06:	71 f0       	breq	.+28     	; 0x1f24 <GPIO_writePin+0x68>
    1f08:	bc c0       	rjmp	.+376    	; 0x2082 <GPIO_writePin+0x1c6>
    1f0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0e:	22 30       	cpi	r18, 0x02	; 2
    1f10:	31 05       	cpc	r19, r1
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <GPIO_writePin+0x5a>
    1f14:	5f c0       	rjmp	.+190    	; 0x1fd4 <GPIO_writePin+0x118>
    1f16:	8c 81       	ldd	r24, Y+4	; 0x04
    1f18:	9d 81       	ldd	r25, Y+5	; 0x05
    1f1a:	83 30       	cpi	r24, 0x03	; 3
    1f1c:	91 05       	cpc	r25, r1
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <GPIO_writePin+0x66>
    1f20:	85 c0       	rjmp	.+266    	; 0x202c <GPIO_writePin+0x170>
    1f22:	af c0       	rjmp	.+350    	; 0x2082 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
					if(value == LOGIC_HIGH)
    1f24:	8b 81       	ldd	r24, Y+3	; 0x03
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	a1 f4       	brne	.+40     	; 0x1f52 <GPIO_writePin+0x96>
					{
						SET_BIT(PORTA,pin_num);
    1f2a:	ab e3       	ldi	r26, 0x3B	; 59
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	eb e3       	ldi	r30, 0x3B	; 59
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	48 2f       	mov	r20, r24
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	02 2e       	mov	r0, r18
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <GPIO_writePin+0x8c>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <GPIO_writePin+0x88>
    1f4c:	84 2b       	or	r24, r20
    1f4e:	8c 93       	st	X, r24
    1f50:	98 c0       	rjmp	.+304    	; 0x2082 <GPIO_writePin+0x1c6>
					}
					else
					{
						CLEAR_BIT(PORTA,pin_num);
    1f52:	ab e3       	ldi	r26, 0x3B	; 59
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	eb e3       	ldi	r30, 0x3B	; 59
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	48 2f       	mov	r20, r24
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	02 2e       	mov	r0, r18
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <GPIO_writePin+0xb4>
    1f6c:	88 0f       	add	r24, r24
    1f6e:	99 1f       	adc	r25, r25
    1f70:	0a 94       	dec	r0
    1f72:	e2 f7       	brpl	.-8      	; 0x1f6c <GPIO_writePin+0xb0>
    1f74:	80 95       	com	r24
    1f76:	84 23       	and	r24, r20
    1f78:	8c 93       	st	X, r24
    1f7a:	83 c0       	rjmp	.+262    	; 0x2082 <GPIO_writePin+0x1c6>
					}
					break;
		case PORTB_ID:
							if(value == LOGIC_HIGH)
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	81 30       	cpi	r24, 0x01	; 1
    1f80:	a1 f4       	brne	.+40     	; 0x1faa <GPIO_writePin+0xee>
							{
								SET_BIT(PORTB,pin_num);
    1f82:	a8 e3       	ldi	r26, 0x38	; 56
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e8 e3       	ldi	r30, 0x38	; 56
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	48 2f       	mov	r20, r24
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	28 2f       	mov	r18, r24
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	02 2e       	mov	r0, r18
    1f9a:	02 c0       	rjmp	.+4      	; 0x1fa0 <GPIO_writePin+0xe4>
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	0a 94       	dec	r0
    1fa2:	e2 f7       	brpl	.-8      	; 0x1f9c <GPIO_writePin+0xe0>
    1fa4:	84 2b       	or	r24, r20
    1fa6:	8c 93       	st	X, r24
    1fa8:	6c c0       	rjmp	.+216    	; 0x2082 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTB,pin_num);
    1faa:	a8 e3       	ldi	r26, 0x38	; 56
    1fac:	b0 e0       	ldi	r27, 0x00	; 0
    1fae:	e8 e3       	ldi	r30, 0x38	; 56
    1fb0:	f0 e0       	ldi	r31, 0x00	; 0
    1fb2:	80 81       	ld	r24, Z
    1fb4:	48 2f       	mov	r20, r24
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	02 2e       	mov	r0, r18
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <GPIO_writePin+0x10c>
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	0a 94       	dec	r0
    1fca:	e2 f7       	brpl	.-8      	; 0x1fc4 <GPIO_writePin+0x108>
    1fcc:	80 95       	com	r24
    1fce:	84 23       	and	r24, r20
    1fd0:	8c 93       	st	X, r24
    1fd2:	57 c0       	rjmp	.+174    	; 0x2082 <GPIO_writePin+0x1c6>
							}
							break;
		case PORTC_ID:
							if(value == LOGIC_HIGH)
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	a1 f4       	brne	.+40     	; 0x2002 <GPIO_writePin+0x146>
							{
								SET_BIT(PORTC,pin_num);
    1fda:	a5 e3       	ldi	r26, 0x35	; 53
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e5 e3       	ldi	r30, 0x35	; 53
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	48 2f       	mov	r20, r24
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	02 2e       	mov	r0, r18
    1ff2:	02 c0       	rjmp	.+4      	; 0x1ff8 <GPIO_writePin+0x13c>
    1ff4:	88 0f       	add	r24, r24
    1ff6:	99 1f       	adc	r25, r25
    1ff8:	0a 94       	dec	r0
    1ffa:	e2 f7       	brpl	.-8      	; 0x1ff4 <GPIO_writePin+0x138>
    1ffc:	84 2b       	or	r24, r20
    1ffe:	8c 93       	st	X, r24
    2000:	40 c0       	rjmp	.+128    	; 0x2082 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTC,pin_num);
    2002:	a5 e3       	ldi	r26, 0x35	; 53
    2004:	b0 e0       	ldi	r27, 0x00	; 0
    2006:	e5 e3       	ldi	r30, 0x35	; 53
    2008:	f0 e0       	ldi	r31, 0x00	; 0
    200a:	80 81       	ld	r24, Z
    200c:	48 2f       	mov	r20, r24
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	02 2e       	mov	r0, r18
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <GPIO_writePin+0x164>
    201c:	88 0f       	add	r24, r24
    201e:	99 1f       	adc	r25, r25
    2020:	0a 94       	dec	r0
    2022:	e2 f7       	brpl	.-8      	; 0x201c <GPIO_writePin+0x160>
    2024:	80 95       	com	r24
    2026:	84 23       	and	r24, r20
    2028:	8c 93       	st	X, r24
    202a:	2b c0       	rjmp	.+86     	; 0x2082 <GPIO_writePin+0x1c6>
							}
							break;
		case PORTD_ID:
							if(value == LOGIC_HIGH)
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	a1 f4       	brne	.+40     	; 0x205a <GPIO_writePin+0x19e>
							{
								SET_BIT(PORTD,pin_num);
    2032:	a2 e3       	ldi	r26, 0x32	; 50
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	e2 e3       	ldi	r30, 0x32	; 50
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <GPIO_writePin+0x194>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <GPIO_writePin+0x190>
    2054:	84 2b       	or	r24, r20
    2056:	8c 93       	st	X, r24
    2058:	14 c0       	rjmp	.+40     	; 0x2082 <GPIO_writePin+0x1c6>
							}
							else
							{
								CLEAR_BIT(PORTD,pin_num);
    205a:	a2 e3       	ldi	r26, 0x32	; 50
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e2 e3       	ldi	r30, 0x32	; 50
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <GPIO_writePin+0x1bc>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <GPIO_writePin+0x1b8>
    207c:	80 95       	com	r24
    207e:	84 23       	and	r24, r20
    2080:	8c 93       	st	X, r24
							}
							break;
		}
	}

}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <GPIO_readPin+0x6>
    2098:	00 d0       	rcall	.+0      	; 0x209a <GPIO_readPin+0x8>
    209a:	00 d0       	rcall	.+0      	; 0x209c <GPIO_readPin+0xa>
    209c:	cd b7       	in	r28, 0x3d	; 61
    209e:	de b7       	in	r29, 0x3e	; 62
    20a0:	89 83       	std	Y+1, r24	; 0x01
    20a2:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	88 30       	cpi	r24, 0x08	; 8
    20a8:	08 f0       	brcs	.+2      	; 0x20ac <GPIO_readPin+0x1a>
    20aa:	85 c0       	rjmp	.+266    	; 0x21b6 <GPIO_readPin+0x124>
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	84 30       	cpi	r24, 0x04	; 4
    20b0:	08 f0       	brcs	.+2      	; 0x20b4 <GPIO_readPin+0x22>
    20b2:	81 c0       	rjmp	.+258    	; 0x21b6 <GPIO_readPin+0x124>
			/* Do Nothing */
		}
		else
		{
			/* Setup the pin direction as required */
			switch(port_num)
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	3d 83       	std	Y+5, r19	; 0x05
    20bc:	2c 83       	std	Y+4, r18	; 0x04
    20be:	4c 81       	ldd	r20, Y+4	; 0x04
    20c0:	5d 81       	ldd	r21, Y+5	; 0x05
    20c2:	41 30       	cpi	r20, 0x01	; 1
    20c4:	51 05       	cpc	r21, r1
    20c6:	79 f1       	breq	.+94     	; 0x2126 <GPIO_readPin+0x94>
    20c8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ca:	9d 81       	ldd	r25, Y+5	; 0x05
    20cc:	82 30       	cpi	r24, 0x02	; 2
    20ce:	91 05       	cpc	r25, r1
    20d0:	34 f4       	brge	.+12     	; 0x20de <GPIO_readPin+0x4c>
    20d2:	2c 81       	ldd	r18, Y+4	; 0x04
    20d4:	3d 81       	ldd	r19, Y+5	; 0x05
    20d6:	21 15       	cp	r18, r1
    20d8:	31 05       	cpc	r19, r1
    20da:	69 f0       	breq	.+26     	; 0x20f6 <GPIO_readPin+0x64>
    20dc:	6c c0       	rjmp	.+216    	; 0x21b6 <GPIO_readPin+0x124>
    20de:	4c 81       	ldd	r20, Y+4	; 0x04
    20e0:	5d 81       	ldd	r21, Y+5	; 0x05
    20e2:	42 30       	cpi	r20, 0x02	; 2
    20e4:	51 05       	cpc	r21, r1
    20e6:	b9 f1       	breq	.+110    	; 0x2156 <GPIO_readPin+0xc4>
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	83 30       	cpi	r24, 0x03	; 3
    20ee:	91 05       	cpc	r25, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <GPIO_readPin+0x62>
    20f2:	49 c0       	rjmp	.+146    	; 0x2186 <GPIO_readPin+0xf4>
    20f4:	60 c0       	rjmp	.+192    	; 0x21b6 <GPIO_readPin+0x124>
			{
			case PORTA_ID:
				if( BIT_IS_SET(PINA,pin_num) )
    20f6:	e9 e3       	ldi	r30, 0x39	; 57
    20f8:	f0 e0       	ldi	r31, 0x00	; 0
    20fa:	80 81       	ld	r24, Z
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a9 01       	movw	r20, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <GPIO_readPin+0x7c>
    210a:	55 95       	asr	r21
    210c:	47 95       	ror	r20
    210e:	8a 95       	dec	r24
    2110:	e2 f7       	brpl	.-8      	; 0x210a <GPIO_readPin+0x78>
    2112:	ca 01       	movw	r24, r20
    2114:	81 70       	andi	r24, 0x01	; 1
    2116:	90 70       	andi	r25, 0x00	; 0
    2118:	88 23       	and	r24, r24
    211a:	19 f0       	breq	.+6      	; 0x2122 <GPIO_readPin+0x90>
				{
					return LOGIC_HIGH ;
    211c:	51 e0       	ldi	r21, 0x01	; 1
    211e:	5b 83       	std	Y+3, r21	; 0x03
    2120:	4b c0       	rjmp	.+150    	; 0x21b8 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2122:	1b 82       	std	Y+3, r1	; 0x03
    2124:	49 c0       	rjmp	.+146    	; 0x21b8 <GPIO_readPin+0x126>
				}
				break;
			case PORTB_ID:
				if( BIT_IS_SET(PINB,pin_num) )
    2126:	e6 e3       	ldi	r30, 0x36	; 54
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	28 2f       	mov	r18, r24
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a9 01       	movw	r20, r18
    2138:	02 c0       	rjmp	.+4      	; 0x213e <GPIO_readPin+0xac>
    213a:	55 95       	asr	r21
    213c:	47 95       	ror	r20
    213e:	8a 95       	dec	r24
    2140:	e2 f7       	brpl	.-8      	; 0x213a <GPIO_readPin+0xa8>
    2142:	ca 01       	movw	r24, r20
    2144:	81 70       	andi	r24, 0x01	; 1
    2146:	90 70       	andi	r25, 0x00	; 0
    2148:	88 23       	and	r24, r24
    214a:	19 f0       	breq	.+6      	; 0x2152 <GPIO_readPin+0xc0>
				{
					return LOGIC_HIGH ;
    214c:	51 e0       	ldi	r21, 0x01	; 1
    214e:	5b 83       	std	Y+3, r21	; 0x03
    2150:	33 c0       	rjmp	.+102    	; 0x21b8 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2152:	1b 82       	std	Y+3, r1	; 0x03
    2154:	31 c0       	rjmp	.+98     	; 0x21b8 <GPIO_readPin+0x126>
				}
				break;
			case PORTC_ID:
				if( BIT_IS_SET(PINC,pin_num) )
    2156:	e3 e3       	ldi	r30, 0x33	; 51
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a9 01       	movw	r20, r18
    2168:	02 c0       	rjmp	.+4      	; 0x216e <GPIO_readPin+0xdc>
    216a:	55 95       	asr	r21
    216c:	47 95       	ror	r20
    216e:	8a 95       	dec	r24
    2170:	e2 f7       	brpl	.-8      	; 0x216a <GPIO_readPin+0xd8>
    2172:	ca 01       	movw	r24, r20
    2174:	81 70       	andi	r24, 0x01	; 1
    2176:	90 70       	andi	r25, 0x00	; 0
    2178:	88 23       	and	r24, r24
    217a:	19 f0       	breq	.+6      	; 0x2182 <GPIO_readPin+0xf0>
				{
					return LOGIC_HIGH ;
    217c:	51 e0       	ldi	r21, 0x01	; 1
    217e:	5b 83       	std	Y+3, r21	; 0x03
    2180:	1b c0       	rjmp	.+54     	; 0x21b8 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    2182:	1b 82       	std	Y+3, r1	; 0x03
    2184:	19 c0       	rjmp	.+50     	; 0x21b8 <GPIO_readPin+0x126>
				}
				break;
			case PORTD_ID:
				if( BIT_IS_SET(PIND,pin_num) )
    2186:	e0 e3       	ldi	r30, 0x30	; 48
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	a9 01       	movw	r20, r18
    2198:	02 c0       	rjmp	.+4      	; 0x219e <GPIO_readPin+0x10c>
    219a:	55 95       	asr	r21
    219c:	47 95       	ror	r20
    219e:	8a 95       	dec	r24
    21a0:	e2 f7       	brpl	.-8      	; 0x219a <GPIO_readPin+0x108>
    21a2:	ca 01       	movw	r24, r20
    21a4:	81 70       	andi	r24, 0x01	; 1
    21a6:	90 70       	andi	r25, 0x00	; 0
    21a8:	88 23       	and	r24, r24
    21aa:	19 f0       	breq	.+6      	; 0x21b2 <GPIO_readPin+0x120>
				{
					return LOGIC_HIGH ;
    21ac:	51 e0       	ldi	r21, 0x01	; 1
    21ae:	5b 83       	std	Y+3, r21	; 0x03
    21b0:	03 c0       	rjmp	.+6      	; 0x21b8 <GPIO_readPin+0x126>
				}
				else
				{
					return LOGIC_LOW ;
    21b2:	1b 82       	std	Y+3, r1	; 0x03
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <GPIO_readPin+0x126>
    21b6:	02 c0       	rjmp	.+4      	; 0x21bc <GPIO_readPin+0x12a>
				}
				break;
			}
		}

}
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	8e 83       	std	Y+6, r24	; 0x06
    21bc:	8e 81       	ldd	r24, Y+6	; 0x06
    21be:	26 96       	adiw	r28, 0x06	; 6
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <GPIO_setupPortDirection+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <GPIO_setupPortDirection+0x8>
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	84 30       	cpi	r24, 0x04	; 4
    21e4:	90 f5       	brcc	.+100    	; 0x224a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	28 2f       	mov	r18, r24
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	3c 83       	std	Y+4, r19	; 0x04
    21ee:	2b 83       	std	Y+3, r18	; 0x03
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	81 30       	cpi	r24, 0x01	; 1
    21f6:	91 05       	cpc	r25, r1
    21f8:	d1 f0       	breq	.+52     	; 0x222e <GPIO_setupPortDirection+0x5e>
    21fa:	2b 81       	ldd	r18, Y+3	; 0x03
    21fc:	3c 81       	ldd	r19, Y+4	; 0x04
    21fe:	22 30       	cpi	r18, 0x02	; 2
    2200:	31 05       	cpc	r19, r1
    2202:	2c f4       	brge	.+10     	; 0x220e <GPIO_setupPortDirection+0x3e>
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	61 f0       	breq	.+24     	; 0x2224 <GPIO_setupPortDirection+0x54>
    220c:	1e c0       	rjmp	.+60     	; 0x224a <GPIO_setupPortDirection+0x7a>
    220e:	2b 81       	ldd	r18, Y+3	; 0x03
    2210:	3c 81       	ldd	r19, Y+4	; 0x04
    2212:	22 30       	cpi	r18, 0x02	; 2
    2214:	31 05       	cpc	r19, r1
    2216:	81 f0       	breq	.+32     	; 0x2238 <GPIO_setupPortDirection+0x68>
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	81 f0       	breq	.+32     	; 0x2242 <GPIO_setupPortDirection+0x72>
    2222:	13 c0       	rjmp	.+38     	; 0x224a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2224:	ea e3       	ldi	r30, 0x3A	; 58
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	80 83       	st	Z, r24
    222c:	0e c0       	rjmp	.+28     	; 0x224a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    222e:	e7 e3       	ldi	r30, 0x37	; 55
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	80 83       	st	Z, r24
    2236:	09 c0       	rjmp	.+18     	; 0x224a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2238:	e4 e3       	ldi	r30, 0x34	; 52
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	80 83       	st	Z, r24
    2240:	04 c0       	rjmp	.+8      	; 0x224a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2242:	e1 e3       	ldi	r30, 0x31	; 49
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	80 83       	st	Z, r24
			break;
		}
	}
}
    224a:	0f 90       	pop	r0
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	0f 90       	pop	r0
    2252:	cf 91       	pop	r28
    2254:	df 91       	pop	r29
    2256:	08 95       	ret

00002258 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2258:	df 93       	push	r29
    225a:	cf 93       	push	r28
    225c:	00 d0       	rcall	.+0      	; 0x225e <GPIO_writePort+0x6>
    225e:	00 d0       	rcall	.+0      	; 0x2260 <GPIO_writePort+0x8>
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	6a 83       	std	Y+2, r22	; 0x02
	if(( port_num >= NUM_OF_PORTS) )
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	84 30       	cpi	r24, 0x04	; 4
    226c:	90 f5       	brcc	.+100    	; 0x22d2 <GPIO_writePort+0x7a>
		{
		}

		else
		{
			switch(port_num)
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	3c 83       	std	Y+4, r19	; 0x04
    2276:	2b 83       	std	Y+3, r18	; 0x03
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	81 30       	cpi	r24, 0x01	; 1
    227e:	91 05       	cpc	r25, r1
    2280:	d1 f0       	breq	.+52     	; 0x22b6 <GPIO_writePort+0x5e>
    2282:	2b 81       	ldd	r18, Y+3	; 0x03
    2284:	3c 81       	ldd	r19, Y+4	; 0x04
    2286:	22 30       	cpi	r18, 0x02	; 2
    2288:	31 05       	cpc	r19, r1
    228a:	2c f4       	brge	.+10     	; 0x2296 <GPIO_writePort+0x3e>
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	9c 81       	ldd	r25, Y+4	; 0x04
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	61 f0       	breq	.+24     	; 0x22ac <GPIO_writePort+0x54>
    2294:	1e c0       	rjmp	.+60     	; 0x22d2 <GPIO_writePort+0x7a>
    2296:	2b 81       	ldd	r18, Y+3	; 0x03
    2298:	3c 81       	ldd	r19, Y+4	; 0x04
    229a:	22 30       	cpi	r18, 0x02	; 2
    229c:	31 05       	cpc	r19, r1
    229e:	81 f0       	breq	.+32     	; 0x22c0 <GPIO_writePort+0x68>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	83 30       	cpi	r24, 0x03	; 3
    22a6:	91 05       	cpc	r25, r1
    22a8:	81 f0       	breq	.+32     	; 0x22ca <GPIO_writePort+0x72>
    22aa:	13 c0       	rjmp	.+38     	; 0x22d2 <GPIO_writePort+0x7a>
			{
			case PORTA_ID:
								PORTA =value;
    22ac:	eb e3       	ldi	r30, 0x3B	; 59
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	8a 81       	ldd	r24, Y+2	; 0x02
    22b2:	80 83       	st	Z, r24
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <GPIO_writePort+0x7a>
								break;
			case PORTB_ID:
								PORTB=value;
    22b6:	e8 e3       	ldi	r30, 0x38	; 56
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	80 83       	st	Z, r24
    22be:	09 c0       	rjmp	.+18     	; 0x22d2 <GPIO_writePort+0x7a>
								break;
			case PORTC_ID:
								PORTC=value;
    22c0:	e5 e3       	ldi	r30, 0x35	; 53
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	80 83       	st	Z, r24
    22c8:	04 c0       	rjmp	.+8      	; 0x22d2 <GPIO_writePort+0x7a>
								break;
			case PORTD_ID:
								PORTD=value;
    22ca:	e2 e3       	ldi	r30, 0x32	; 50
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	80 83       	st	Z, r24
								break;
			}
		}
}
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	cf 91       	pop	r28
    22dc:	df 91       	pop	r29
    22de:	08 95       	ret

000022e0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    22e0:	df 93       	push	r29
    22e2:	cf 93       	push	r28
    22e4:	00 d0       	rcall	.+0      	; 0x22e6 <GPIO_readPort+0x6>
    22e6:	00 d0       	rcall	.+0      	; 0x22e8 <GPIO_readPort+0x8>
    22e8:	0f 92       	push	r0
    22ea:	cd b7       	in	r28, 0x3d	; 61
    22ec:	de b7       	in	r29, 0x3e	; 62
    22ee:	89 83       	std	Y+1, r24	; 0x01

	if(( port_num >= NUM_OF_PORTS) )
    22f0:	89 81       	ldd	r24, Y+1	; 0x01
    22f2:	84 30       	cpi	r24, 0x04	; 4
    22f4:	98 f5       	brcc	.+102    	; 0x235c <GPIO_readPort+0x7c>
		{
		}

		else
		{
			switch(port_num)
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	3c 83       	std	Y+4, r19	; 0x04
    22fe:	2b 83       	std	Y+3, r18	; 0x03
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	81 30       	cpi	r24, 0x01	; 1
    2306:	91 05       	cpc	r25, r1
    2308:	d1 f0       	breq	.+52     	; 0x233e <GPIO_readPort+0x5e>
    230a:	2b 81       	ldd	r18, Y+3	; 0x03
    230c:	3c 81       	ldd	r19, Y+4	; 0x04
    230e:	22 30       	cpi	r18, 0x02	; 2
    2310:	31 05       	cpc	r19, r1
    2312:	2c f4       	brge	.+10     	; 0x231e <GPIO_readPort+0x3e>
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	00 97       	sbiw	r24, 0x00	; 0
    231a:	61 f0       	breq	.+24     	; 0x2334 <GPIO_readPort+0x54>
    231c:	1f c0       	rjmp	.+62     	; 0x235c <GPIO_readPort+0x7c>
    231e:	2b 81       	ldd	r18, Y+3	; 0x03
    2320:	3c 81       	ldd	r19, Y+4	; 0x04
    2322:	22 30       	cpi	r18, 0x02	; 2
    2324:	31 05       	cpc	r19, r1
    2326:	81 f0       	breq	.+32     	; 0x2348 <GPIO_readPort+0x68>
    2328:	8b 81       	ldd	r24, Y+3	; 0x03
    232a:	9c 81       	ldd	r25, Y+4	; 0x04
    232c:	83 30       	cpi	r24, 0x03	; 3
    232e:	91 05       	cpc	r25, r1
    2330:	81 f0       	breq	.+32     	; 0x2352 <GPIO_readPort+0x72>
    2332:	14 c0       	rjmp	.+40     	; 0x235c <GPIO_readPort+0x7c>
			{
			case PORTA_ID:
						return (PINA & 0xFF);
    2334:	e9 e3       	ldi	r30, 0x39	; 57
    2336:	f0 e0       	ldi	r31, 0x00	; 0
    2338:	90 81       	ld	r25, Z
    233a:	9a 83       	std	Y+2, r25	; 0x02
    233c:	10 c0       	rjmp	.+32     	; 0x235e <GPIO_readPort+0x7e>
						break;
			case PORTB_ID:
						return (PINB & 0xFF);
    233e:	e6 e3       	ldi	r30, 0x36	; 54
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	20 81       	ld	r18, Z
    2344:	2a 83       	std	Y+2, r18	; 0x02
    2346:	0b c0       	rjmp	.+22     	; 0x235e <GPIO_readPort+0x7e>
								break;
			case PORTC_ID:
						return (PINC & 0xFF);
    2348:	e3 e3       	ldi	r30, 0x33	; 51
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	30 81       	ld	r19, Z
    234e:	3a 83       	std	Y+2, r19	; 0x02
    2350:	06 c0       	rjmp	.+12     	; 0x235e <GPIO_readPort+0x7e>

								break;
			case PORTD_ID:
						return (PIND & 0xFF);
    2352:	e0 e3       	ldi	r30, 0x30	; 48
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	8a 83       	std	Y+2, r24	; 0x02
    235a:	01 c0       	rjmp	.+2      	; 0x235e <GPIO_readPort+0x7e>
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <GPIO_readPort+0x82>

								break;
			}
		}
}
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	9d 83       	std	Y+5, r25	; 0x05
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	cf 91       	pop	r28
    2370:	df 91       	pop	r29
    2372:	08 95       	ret

00002374 <__vector_1>:
}time;

unsigned char counter=0;

ISR(INT0_vect)
{
    2374:	1f 92       	push	r1
    2376:	0f 92       	push	r0
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	0f 92       	push	r0
    237c:	11 24       	eor	r1, r1
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
	time.timer_reset = 0 ; // stop watch reseted
    2386:	10 92 71 00 	sts	0x0071, r1
    238a:	10 92 72 00 	sts	0x0072, r1
    238e:	10 92 73 00 	sts	0x0073, r1
    2392:	10 92 74 00 	sts	0x0074, r1
    2396:	10 92 75 00 	sts	0x0075, r1
    239a:	10 92 76 00 	sts	0x0076, r1
    239e:	10 92 77 00 	sts	0x0077, r1
    23a2:	10 92 78 00 	sts	0x0078, r1
}
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	0f 90       	pop	r0
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	0f 90       	pop	r0
    23b0:	1f 90       	pop	r1
    23b2:	18 95       	reti

000023b4 <__vector_2>:

ISR(INT1_vect)
{
    23b4:	1f 92       	push	r1
    23b6:	0f 92       	push	r0
    23b8:	0f b6       	in	r0, 0x3f	; 63
    23ba:	0f 92       	push	r0
    23bc:	11 24       	eor	r1, r1
    23be:	8f 93       	push	r24
    23c0:	af 93       	push	r26
    23c2:	bf 93       	push	r27
    23c4:	ef 93       	push	r30
    23c6:	ff 93       	push	r31
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1<<CS12) & ~(1<<CS10) ; // stop watch paused
    23d0:	ae e4       	ldi	r26, 0x4E	; 78
    23d2:	b0 e0       	ldi	r27, 0x00	; 0
    23d4:	ee e4       	ldi	r30, 0x4E	; 78
    23d6:	f0 e0       	ldi	r31, 0x00	; 0
    23d8:	80 81       	ld	r24, Z
    23da:	8a 7f       	andi	r24, 0xFA	; 250
    23dc:	8c 93       	st	X, r24
}
    23de:	cf 91       	pop	r28
    23e0:	df 91       	pop	r29
    23e2:	ff 91       	pop	r31
    23e4:	ef 91       	pop	r30
    23e6:	bf 91       	pop	r27
    23e8:	af 91       	pop	r26
    23ea:	8f 91       	pop	r24
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	0f 90       	pop	r0
    23f2:	1f 90       	pop	r1
    23f4:	18 95       	reti

000023f6 <__vector_3>:

ISR(INT2_vect)
{
    23f6:	1f 92       	push	r1
    23f8:	0f 92       	push	r0
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	0f 92       	push	r0
    23fe:	11 24       	eor	r1, r1
    2400:	8f 93       	push	r24
    2402:	af 93       	push	r26
    2404:	bf 93       	push	r27
    2406:	ef 93       	push	r30
    2408:	ff 93       	push	r31
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1<<CS12) | (1<<CS10) ; // stop watch resumed
    2412:	ae e4       	ldi	r26, 0x4E	; 78
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	ee e4       	ldi	r30, 0x4E	; 78
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	85 60       	ori	r24, 0x05	; 5
    241e:	8c 93       	st	X, r24
}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	ff 91       	pop	r31
    2426:	ef 91       	pop	r30
    2428:	bf 91       	pop	r27
    242a:	af 91       	pop	r26
    242c:	8f 91       	pop	r24
    242e:	0f 90       	pop	r0
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	0f 90       	pop	r0
    2434:	1f 90       	pop	r1
    2436:	18 95       	reti

00002438 <INT_Init>:

void INT_Init(void)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	cd b7       	in	r28, 0x3d	; 61
    243e:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<PD2) & ~(1<<PD3) ; // configure PD2 and PD3 as I/P pins
    2440:	a1 e3       	ldi	r26, 0x31	; 49
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e1 e3       	ldi	r30, 0x31	; 49
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	83 7f       	andi	r24, 0xF3	; 243
    244c:	8c 93       	st	X, r24

	PORTD |=(1<<PD2); // Internal pull up enabled in PD2
    244e:	a2 e3       	ldi	r26, 0x32	; 50
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e2 e3       	ldi	r30, 0x32	; 50
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	84 60       	ori	r24, 0x04	; 4
    245a:	8c 93       	st	X, r24

	DDRB &= ~(1<<PB2) ; // configure PB2 as I/P pins
    245c:	a7 e3       	ldi	r26, 0x37	; 55
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e7 e3       	ldi	r30, 0x37	; 55
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	8b 7f       	andi	r24, 0xFB	; 251
    2468:	8c 93       	st	X, r24

	PORTB |=(1<<PB2); // Internal pull up enabled in PB2
    246a:	a8 e3       	ldi	r26, 0x38	; 56
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e8 e3       	ldi	r30, 0x38	; 56
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	84 60       	ori	r24, 0x04	; 4
    2476:	8c 93       	st	X, r24

	MCUCR |= (1<<ISC01) | (1<<ISC10) | (1<<ISC11); // configure INT0 and INT2 to falling edge and INT1 to rising edge
    2478:	a5 e5       	ldi	r26, 0x55	; 85
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e5 e5       	ldi	r30, 0x55	; 85
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8e 60       	ori	r24, 0x0E	; 14
    2484:	8c 93       	st	X, r24

	GICR  |= (1<<INT0) | (1<<INT1) | (1<<INT2) ; // all EXT INTs masks are enabled (module interrupt)
    2486:	ab e5       	ldi	r26, 0x5B	; 91
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	eb e5       	ldi	r30, 0x5B	; 91
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	80 6e       	ori	r24, 0xE0	; 224
    2492:	8c 93       	st	X, r24
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <TIMER_counter>:

void TIMER_counter(void)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
	timer[0]++;
    24a2:	80 91 71 00 	lds	r24, 0x0071
    24a6:	8f 5f       	subi	r24, 0xFF	; 255
    24a8:	80 93 71 00 	sts	0x0071, r24
}
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <main>:

int main()
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	a3 97       	sbiw	r28, 0x23	; 35
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType Timer1_configs = { 0 , 977 , TIMER1_1024_PRESCALER , TIMER1_CTC_MODE };
    24c6:	be 01       	movw	r22, r28
    24c8:	67 5e       	subi	r22, 0xE7	; 231
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	78 a3       	std	Y+32, r23	; 0x20
    24ce:	6f 8f       	std	Y+31, r22	; 0x1f
    24d0:	88 e6       	ldi	r24, 0x68	; 104
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9a a3       	std	Y+34, r25	; 0x22
    24d6:	89 a3       	std	Y+33, r24	; 0x21
    24d8:	96 e0       	ldi	r25, 0x06	; 6
    24da:	9b a3       	std	Y+35, r25	; 0x23
    24dc:	e9 a1       	ldd	r30, Y+33	; 0x21
    24de:	fa a1       	ldd	r31, Y+34	; 0x22
    24e0:	00 80       	ld	r0, Z
    24e2:	69 a1       	ldd	r22, Y+33	; 0x21
    24e4:	7a a1       	ldd	r23, Y+34	; 0x22
    24e6:	6f 5f       	subi	r22, 0xFF	; 255
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ea:	7a a3       	std	Y+34, r23	; 0x22
    24ec:	69 a3       	std	Y+33, r22	; 0x21
    24ee:	ef 8d       	ldd	r30, Y+31	; 0x1f
    24f0:	f8 a1       	ldd	r31, Y+32	; 0x20
    24f2:	00 82       	st	Z, r0
    24f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24f6:	78 a1       	ldd	r23, Y+32	; 0x20
    24f8:	6f 5f       	subi	r22, 0xFF	; 255
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	78 a3       	std	Y+32, r23	; 0x20
    24fe:	6f 8f       	std	Y+31, r22	; 0x1f
    2500:	7b a1       	ldd	r23, Y+35	; 0x23
    2502:	71 50       	subi	r23, 0x01	; 1
    2504:	7b a3       	std	Y+35, r23	; 0x23
    2506:	8b a1       	ldd	r24, Y+35	; 0x23
    2508:	88 23       	and	r24, r24
    250a:	41 f7       	brne	.-48     	; 0x24dc <main+0x2a>

	INT_Init(); // External interrupts initialization
    250c:	0e 94 1c 12 	call	0x2438	; 0x2438 <INT_Init>

	Timer1_init( &Timer1_configs ); // Timer 1 initialization
    2510:	ce 01       	movw	r24, r28
    2512:	49 96       	adiw	r24, 0x19	; 25
    2514:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <Timer1_init>

	Timer1_setCallBack(TIMER_counter); // setting the function callback
    2518:	8d e4       	ldi	r24, 0x4D	; 77
    251a:	92 e1       	ldi	r25, 0x12	; 18
    251c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <Timer1_setCallBack>

	SREG |= (1<<7); // I-bit enabled
    2520:	af e5       	ldi	r26, 0x5F	; 95
    2522:	b0 e0       	ldi	r27, 0x00	; 0
    2524:	ef e5       	ldi	r30, 0x5F	; 95
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	80 81       	ld	r24, Z
    252a:	80 68       	ori	r24, 0x80	; 128
    252c:	8c 93       	st	X, r24

	time.timer_reset = 0 ; // clear the timer
    252e:	10 92 71 00 	sts	0x0071, r1
    2532:	10 92 72 00 	sts	0x0072, r1
    2536:	10 92 73 00 	sts	0x0073, r1
    253a:	10 92 74 00 	sts	0x0074, r1
    253e:	10 92 75 00 	sts	0x0075, r1
    2542:	10 92 76 00 	sts	0x0076, r1
    2546:	10 92 77 00 	sts	0x0077, r1
    254a:	10 92 78 00 	sts	0x0078, r1

	DDRC |= 0x0F; // configure PC0 - PC3 as O/P pins
    254e:	a4 e3       	ldi	r26, 0x34	; 52
    2550:	b0 e0       	ldi	r27, 0x00	; 0
    2552:	e4 e3       	ldi	r30, 0x34	; 52
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
    2558:	8f 60       	ori	r24, 0x0F	; 15
    255a:	8c 93       	st	X, r24

	DDRA |= 0x3F; // configure PA0 - PA5 as O/P pins
    255c:	aa e3       	ldi	r26, 0x3A	; 58
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	ea e3       	ldi	r30, 0x3A	; 58
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	8f 63       	ori	r24, 0x3F	; 63
    2568:	8c 93       	st	X, r24

	while(1)
	{
		PORTA = (PORTA & 0xC0) | (1<<(5-counter)) ;
    256a:	ab e3       	ldi	r26, 0x3B	; 59
    256c:	b0 e0       	ldi	r27, 0x00	; 0
    256e:	eb e3       	ldi	r30, 0x3B	; 59
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	80 81       	ld	r24, Z
    2574:	48 2f       	mov	r20, r24
    2576:	40 7c       	andi	r20, 0xC0	; 192
    2578:	80 91 70 00 	lds	r24, 0x0070
    257c:	28 2f       	mov	r18, r24
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	85 e0       	ldi	r24, 0x05	; 5
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	fc 01       	movw	r30, r24
    2586:	e2 1b       	sub	r30, r18
    2588:	f3 0b       	sbc	r31, r19
    258a:	9f 01       	movw	r18, r30
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <main+0xe4>
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	2a 95       	dec	r18
    2598:	e2 f7       	brpl	.-8      	; 0x2592 <main+0xe0>
    259a:	84 2b       	or	r24, r20
    259c:	8c 93       	st	X, r24
		/* setting the first 6 pins only of PORTA
		 * (5-counter) to reverse the displayed 7-segment
		 */

		PORTC = (PORTC & 0xF0) | timer[counter] ;
    259e:	a5 e3       	ldi	r26, 0x35	; 53
    25a0:	b0 e0       	ldi	r27, 0x00	; 0
    25a2:	e5 e3       	ldi	r30, 0x35	; 53
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	28 2f       	mov	r18, r24
    25aa:	20 7f       	andi	r18, 0xF0	; 240
    25ac:	80 91 70 00 	lds	r24, 0x0070
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	fc 01       	movw	r30, r24
    25b6:	ef 58       	subi	r30, 0x8F	; 143
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	80 81       	ld	r24, Z
    25bc:	82 2b       	or	r24, r18
    25be:	8c 93       	st	X, r24
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e0       	ldi	r26, 0x00	; 0
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	8d 8b       	std	Y+21, r24	; 0x15
    25ca:	9e 8b       	std	Y+22, r25	; 0x16
    25cc:	af 8b       	std	Y+23, r26	; 0x17
    25ce:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25d0:	6d 89       	ldd	r22, Y+21	; 0x15
    25d2:	7e 89       	ldd	r23, Y+22	; 0x16
    25d4:	8f 89       	ldd	r24, Y+23	; 0x17
    25d6:	98 8d       	ldd	r25, Y+24	; 0x18
    25d8:	2b ea       	ldi	r18, 0xAB	; 171
    25da:	3a ea       	ldi	r19, 0xAA	; 170
    25dc:	4a ea       	ldi	r20, 0xAA	; 170
    25de:	5e e3       	ldi	r21, 0x3E	; 62
    25e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e4:	dc 01       	movw	r26, r24
    25e6:	cb 01       	movw	r24, r22
    25e8:	89 8b       	std	Y+17, r24	; 0x11
    25ea:	9a 8b       	std	Y+18, r25	; 0x12
    25ec:	ab 8b       	std	Y+19, r26	; 0x13
    25ee:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25f0:	69 89       	ldd	r22, Y+17	; 0x11
    25f2:	7a 89       	ldd	r23, Y+18	; 0x12
    25f4:	8b 89       	ldd	r24, Y+19	; 0x13
    25f6:	9c 89       	ldd	r25, Y+20	; 0x14
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e8       	ldi	r20, 0x80	; 128
    25fe:	5f e3       	ldi	r21, 0x3F	; 63
    2600:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2604:	88 23       	and	r24, r24
    2606:	1c f4       	brge	.+6      	; 0x260e <main+0x15c>
		__ticks = 1;
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	88 8b       	std	Y+16, r24	; 0x10
    260c:	91 c0       	rjmp	.+290    	; 0x2730 <main+0x27e>
	else if (__tmp > 255)
    260e:	69 89       	ldd	r22, Y+17	; 0x11
    2610:	7a 89       	ldd	r23, Y+18	; 0x12
    2612:	8b 89       	ldd	r24, Y+19	; 0x13
    2614:	9c 89       	ldd	r25, Y+20	; 0x14
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4f e7       	ldi	r20, 0x7F	; 127
    261c:	53 e4       	ldi	r21, 0x43	; 67
    261e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2622:	18 16       	cp	r1, r24
    2624:	0c f0       	brlt	.+2      	; 0x2628 <main+0x176>
    2626:	7b c0       	rjmp	.+246    	; 0x271e <main+0x26c>
	{
		_delay_ms(__us / 1000.0);
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	54 e4       	ldi	r21, 0x44	; 68
    2638:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	8c 87       	std	Y+12, r24	; 0x0c
    2642:	9d 87       	std	Y+13, r25	; 0x0d
    2644:	ae 87       	std	Y+14, r26	; 0x0e
    2646:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2648:	6c 85       	ldd	r22, Y+12	; 0x0c
    264a:	7d 85       	ldd	r23, Y+13	; 0x0d
    264c:	8e 85       	ldd	r24, Y+14	; 0x0e
    264e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a e7       	ldi	r20, 0x7A	; 122
    2656:	53 e4       	ldi	r21, 0x43	; 67
    2658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	88 87       	std	Y+8, r24	; 0x08
    2662:	99 87       	std	Y+9, r25	; 0x09
    2664:	aa 87       	std	Y+10, r26	; 0x0a
    2666:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2668:	68 85       	ldd	r22, Y+8	; 0x08
    266a:	79 85       	ldd	r23, Y+9	; 0x09
    266c:	8a 85       	ldd	r24, Y+10	; 0x0a
    266e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    267c:	88 23       	and	r24, r24
    267e:	2c f4       	brge	.+10     	; 0x268a <main+0x1d8>
		__ticks = 1;
    2680:	81 e0       	ldi	r24, 0x01	; 1
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	9f 83       	std	Y+7, r25	; 0x07
    2686:	8e 83       	std	Y+6, r24	; 0x06
    2688:	3f c0       	rjmp	.+126    	; 0x2708 <main+0x256>
	else if (__tmp > 65535)
    268a:	68 85       	ldd	r22, Y+8	; 0x08
    268c:	79 85       	ldd	r23, Y+9	; 0x09
    268e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2690:	9b 85       	ldd	r25, Y+11	; 0x0b
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	3f ef       	ldi	r19, 0xFF	; 255
    2696:	4f e7       	ldi	r20, 0x7F	; 127
    2698:	57 e4       	ldi	r21, 0x47	; 71
    269a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269e:	18 16       	cp	r1, r24
    26a0:	4c f5       	brge	.+82     	; 0x26f4 <main+0x242>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    26a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    26a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    26a8:	9f 85       	ldd	r25, Y+15	; 0x0f
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	40 e2       	ldi	r20, 0x20	; 32
    26b0:	51 e4       	ldi	r21, 0x41	; 65
    26b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b6:	dc 01       	movw	r26, r24
    26b8:	cb 01       	movw	r24, r22
    26ba:	bc 01       	movw	r22, r24
    26bc:	cd 01       	movw	r24, r26
    26be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c2:	dc 01       	movw	r26, r24
    26c4:	cb 01       	movw	r24, r22
    26c6:	9f 83       	std	Y+7, r25	; 0x07
    26c8:	8e 83       	std	Y+6, r24	; 0x06
    26ca:	0f c0       	rjmp	.+30     	; 0x26ea <main+0x238>
    26cc:	89 e1       	ldi	r24, 0x19	; 25
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	9d 83       	std	Y+5, r25	; 0x05
    26d2:	8c 83       	std	Y+4, r24	; 0x04
    26d4:	8c 81       	ldd	r24, Y+4	; 0x04
    26d6:	9d 81       	ldd	r25, Y+5	; 0x05
    26d8:	01 97       	sbiw	r24, 0x01	; 1
    26da:	f1 f7       	brne	.-4      	; 0x26d8 <main+0x226>
    26dc:	9d 83       	std	Y+5, r25	; 0x05
    26de:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
    26e2:	9f 81       	ldd	r25, Y+7	; 0x07
    26e4:	01 97       	sbiw	r24, 0x01	; 1
    26e6:	9f 83       	std	Y+7, r25	; 0x07
    26e8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ea:	8e 81       	ldd	r24, Y+6	; 0x06
    26ec:	9f 81       	ldd	r25, Y+7	; 0x07
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	69 f7       	brne	.-38     	; 0x26cc <main+0x21a>
    26f2:	24 c0       	rjmp	.+72     	; 0x273c <main+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f4:	68 85       	ldd	r22, Y+8	; 0x08
    26f6:	79 85       	ldd	r23, Y+9	; 0x09
    26f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    26fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9f 83       	std	Y+7, r25	; 0x07
    2706:	8e 83       	std	Y+6, r24	; 0x06
    2708:	8e 81       	ldd	r24, Y+6	; 0x06
    270a:	9f 81       	ldd	r25, Y+7	; 0x07
    270c:	9b 83       	std	Y+3, r25	; 0x03
    270e:	8a 83       	std	Y+2, r24	; 0x02
    2710:	8a 81       	ldd	r24, Y+2	; 0x02
    2712:	9b 81       	ldd	r25, Y+3	; 0x03
    2714:	01 97       	sbiw	r24, 0x01	; 1
    2716:	f1 f7       	brne	.-4      	; 0x2714 <main+0x262>
    2718:	9b 83       	std	Y+3, r25	; 0x03
    271a:	8a 83       	std	Y+2, r24	; 0x02
    271c:	0f c0       	rjmp	.+30     	; 0x273c <main+0x28a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    271e:	69 89       	ldd	r22, Y+17	; 0x11
    2720:	7a 89       	ldd	r23, Y+18	; 0x12
    2722:	8b 89       	ldd	r24, Y+19	; 0x13
    2724:	9c 89       	ldd	r25, Y+20	; 0x14
    2726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	88 8b       	std	Y+16, r24	; 0x10
    2730:	88 89       	ldd	r24, Y+16	; 0x10
    2732:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	8a 95       	dec	r24
    2738:	f1 f7       	brne	.-4      	; 0x2736 <main+0x284>
    273a:	89 83       	std	Y+1, r24	; 0x01
		 * timer[3] is the second digit of minutes
		 * timer[4] is the first digit of hours
		 * timer[5] is the second digit of hours
		 */

		if( timer[0] == 10)
    273c:	80 91 71 00 	lds	r24, 0x0071
    2740:	8a 30       	cpi	r24, 0x0A	; 10
    2742:	41 f4       	brne	.+16     	; 0x2754 <main+0x2a2>
		{
			timer[0] =0;
    2744:	10 92 71 00 	sts	0x0071, r1
			timer[1]++;
    2748:	80 91 72 00 	lds	r24, 0x0072
    274c:	8f 5f       	subi	r24, 0xFF	; 255
    274e:	80 93 72 00 	sts	0x0072, r24
    2752:	44 c0       	rjmp	.+136    	; 0x27dc <main+0x32a>
		}

		else if( timer[1] == 6)
    2754:	80 91 72 00 	lds	r24, 0x0072
    2758:	86 30       	cpi	r24, 0x06	; 6
    275a:	41 f4       	brne	.+16     	; 0x276c <main+0x2ba>
				{
					timer[1] =0;
    275c:	10 92 72 00 	sts	0x0072, r1
					timer[2]++;
    2760:	80 91 73 00 	lds	r24, 0x0073
    2764:	8f 5f       	subi	r24, 0xFF	; 255
    2766:	80 93 73 00 	sts	0x0073, r24
    276a:	38 c0       	rjmp	.+112    	; 0x27dc <main+0x32a>
				}

		else if( timer[2] == 10)
    276c:	80 91 73 00 	lds	r24, 0x0073
    2770:	8a 30       	cpi	r24, 0x0A	; 10
    2772:	41 f4       	brne	.+16     	; 0x2784 <main+0x2d2>
						{
							timer[2] =0;
    2774:	10 92 73 00 	sts	0x0073, r1
							timer[3]++;
    2778:	80 91 74 00 	lds	r24, 0x0074
    277c:	8f 5f       	subi	r24, 0xFF	; 255
    277e:	80 93 74 00 	sts	0x0074, r24
    2782:	2c c0       	rjmp	.+88     	; 0x27dc <main+0x32a>
						}

		else if( timer[3] == 6)
    2784:	80 91 74 00 	lds	r24, 0x0074
    2788:	86 30       	cpi	r24, 0x06	; 6
    278a:	41 f4       	brne	.+16     	; 0x279c <main+0x2ea>
						{
							timer[3] =0;
    278c:	10 92 74 00 	sts	0x0074, r1
							timer[4]++;
    2790:	80 91 75 00 	lds	r24, 0x0075
    2794:	8f 5f       	subi	r24, 0xFF	; 255
    2796:	80 93 75 00 	sts	0x0075, r24
    279a:	20 c0       	rjmp	.+64     	; 0x27dc <main+0x32a>
						}
		else if( timer[4] == 10)
    279c:	80 91 75 00 	lds	r24, 0x0075
    27a0:	8a 30       	cpi	r24, 0x0A	; 10
    27a2:	41 f4       	brne	.+16     	; 0x27b4 <main+0x302>
						{
							timer[2] =0;
    27a4:	10 92 73 00 	sts	0x0073, r1
							timer[3]++;
    27a8:	80 91 74 00 	lds	r24, 0x0074
    27ac:	8f 5f       	subi	r24, 0xFF	; 255
    27ae:	80 93 74 00 	sts	0x0074, r24
    27b2:	14 c0       	rjmp	.+40     	; 0x27dc <main+0x32a>
						}

		else if( timer[5] == 10)
    27b4:	80 91 76 00 	lds	r24, 0x0076
    27b8:	8a 30       	cpi	r24, 0x0A	; 10
    27ba:	81 f4       	brne	.+32     	; 0x27dc <main+0x32a>
						{
							time.timer_reset = 0 ;
    27bc:	10 92 71 00 	sts	0x0071, r1
    27c0:	10 92 72 00 	sts	0x0072, r1
    27c4:	10 92 73 00 	sts	0x0073, r1
    27c8:	10 92 74 00 	sts	0x0074, r1
    27cc:	10 92 75 00 	sts	0x0075, r1
    27d0:	10 92 76 00 	sts	0x0076, r1
    27d4:	10 92 77 00 	sts	0x0077, r1
    27d8:	10 92 78 00 	sts	0x0078, r1
						}
		counter++;
    27dc:	80 91 70 00 	lds	r24, 0x0070
    27e0:	8f 5f       	subi	r24, 0xFF	; 255
    27e2:	80 93 70 00 	sts	0x0070, r24

		if(counter == 6)
    27e6:	80 91 70 00 	lds	r24, 0x0070
    27ea:	86 30       	cpi	r24, 0x06	; 6
    27ec:	09 f0       	breq	.+2      	; 0x27f0 <main+0x33e>
    27ee:	bd ce       	rjmp	.-646    	; 0x256a <main+0xb8>
		{
			counter=0;
    27f0:	10 92 70 00 	sts	0x0070, r1
    27f4:	ba ce       	rjmp	.-652    	; 0x256a <main+0xb8>

000027f6 <__prologue_saves__>:
    27f6:	2f 92       	push	r2
    27f8:	3f 92       	push	r3
    27fa:	4f 92       	push	r4
    27fc:	5f 92       	push	r5
    27fe:	6f 92       	push	r6
    2800:	7f 92       	push	r7
    2802:	8f 92       	push	r8
    2804:	9f 92       	push	r9
    2806:	af 92       	push	r10
    2808:	bf 92       	push	r11
    280a:	cf 92       	push	r12
    280c:	df 92       	push	r13
    280e:	ef 92       	push	r14
    2810:	ff 92       	push	r15
    2812:	0f 93       	push	r16
    2814:	1f 93       	push	r17
    2816:	cf 93       	push	r28
    2818:	df 93       	push	r29
    281a:	cd b7       	in	r28, 0x3d	; 61
    281c:	de b7       	in	r29, 0x3e	; 62
    281e:	ca 1b       	sub	r28, r26
    2820:	db 0b       	sbc	r29, r27
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	09 94       	ijmp

0000282e <__epilogue_restores__>:
    282e:	2a 88       	ldd	r2, Y+18	; 0x12
    2830:	39 88       	ldd	r3, Y+17	; 0x11
    2832:	48 88       	ldd	r4, Y+16	; 0x10
    2834:	5f 84       	ldd	r5, Y+15	; 0x0f
    2836:	6e 84       	ldd	r6, Y+14	; 0x0e
    2838:	7d 84       	ldd	r7, Y+13	; 0x0d
    283a:	8c 84       	ldd	r8, Y+12	; 0x0c
    283c:	9b 84       	ldd	r9, Y+11	; 0x0b
    283e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2840:	b9 84       	ldd	r11, Y+9	; 0x09
    2842:	c8 84       	ldd	r12, Y+8	; 0x08
    2844:	df 80       	ldd	r13, Y+7	; 0x07
    2846:	ee 80       	ldd	r14, Y+6	; 0x06
    2848:	fd 80       	ldd	r15, Y+5	; 0x05
    284a:	0c 81       	ldd	r16, Y+4	; 0x04
    284c:	1b 81       	ldd	r17, Y+3	; 0x03
    284e:	aa 81       	ldd	r26, Y+2	; 0x02
    2850:	b9 81       	ldd	r27, Y+1	; 0x01
    2852:	ce 0f       	add	r28, r30
    2854:	d1 1d       	adc	r29, r1
    2856:	0f b6       	in	r0, 0x3f	; 63
    2858:	f8 94       	cli
    285a:	de bf       	out	0x3e, r29	; 62
    285c:	0f be       	out	0x3f, r0	; 63
    285e:	cd bf       	out	0x3d, r28	; 61
    2860:	ed 01       	movw	r28, r26
    2862:	08 95       	ret

00002864 <itoa>:
    2864:	fb 01       	movw	r30, r22
    2866:	9f 01       	movw	r18, r30
    2868:	e8 94       	clt
    286a:	42 30       	cpi	r20, 0x02	; 2
    286c:	c4 f0       	brlt	.+48     	; 0x289e <itoa+0x3a>
    286e:	45 32       	cpi	r20, 0x25	; 37
    2870:	b4 f4       	brge	.+44     	; 0x289e <itoa+0x3a>
    2872:	4a 30       	cpi	r20, 0x0A	; 10
    2874:	29 f4       	brne	.+10     	; 0x2880 <itoa+0x1c>
    2876:	97 fb       	bst	r25, 7
    2878:	1e f4       	brtc	.+6      	; 0x2880 <itoa+0x1c>
    287a:	90 95       	com	r25
    287c:	81 95       	neg	r24
    287e:	9f 4f       	sbci	r25, 0xFF	; 255
    2880:	64 2f       	mov	r22, r20
    2882:	77 27       	eor	r23, r23
    2884:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__udivmodhi4>
    2888:	80 5d       	subi	r24, 0xD0	; 208
    288a:	8a 33       	cpi	r24, 0x3A	; 58
    288c:	0c f0       	brlt	.+2      	; 0x2890 <itoa+0x2c>
    288e:	89 5d       	subi	r24, 0xD9	; 217
    2890:	81 93       	st	Z+, r24
    2892:	cb 01       	movw	r24, r22
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	a1 f7       	brne	.-24     	; 0x2880 <itoa+0x1c>
    2898:	16 f4       	brtc	.+4      	; 0x289e <itoa+0x3a>
    289a:	5d e2       	ldi	r21, 0x2D	; 45
    289c:	51 93       	st	Z+, r21
    289e:	10 82       	st	Z, r1
    28a0:	c9 01       	movw	r24, r18
    28a2:	0c 94 53 14 	jmp	0x28a6	; 0x28a6 <strrev>

000028a6 <strrev>:
    28a6:	dc 01       	movw	r26, r24
    28a8:	fc 01       	movw	r30, r24
    28aa:	67 2f       	mov	r22, r23
    28ac:	71 91       	ld	r23, Z+
    28ae:	77 23       	and	r23, r23
    28b0:	e1 f7       	brne	.-8      	; 0x28aa <strrev+0x4>
    28b2:	32 97       	sbiw	r30, 0x02	; 2
    28b4:	04 c0       	rjmp	.+8      	; 0x28be <strrev+0x18>
    28b6:	7c 91       	ld	r23, X
    28b8:	6d 93       	st	X+, r22
    28ba:	70 83       	st	Z, r23
    28bc:	62 91       	ld	r22, -Z
    28be:	ae 17       	cp	r26, r30
    28c0:	bf 07       	cpc	r27, r31
    28c2:	c8 f3       	brcs	.-14     	; 0x28b6 <strrev+0x10>
    28c4:	08 95       	ret

000028c6 <__udivmodhi4>:
    28c6:	aa 1b       	sub	r26, r26
    28c8:	bb 1b       	sub	r27, r27
    28ca:	51 e1       	ldi	r21, 0x11	; 17
    28cc:	07 c0       	rjmp	.+14     	; 0x28dc <__udivmodhi4_ep>

000028ce <__udivmodhi4_loop>:
    28ce:	aa 1f       	adc	r26, r26
    28d0:	bb 1f       	adc	r27, r27
    28d2:	a6 17       	cp	r26, r22
    28d4:	b7 07       	cpc	r27, r23
    28d6:	10 f0       	brcs	.+4      	; 0x28dc <__udivmodhi4_ep>
    28d8:	a6 1b       	sub	r26, r22
    28da:	b7 0b       	sbc	r27, r23

000028dc <__udivmodhi4_ep>:
    28dc:	88 1f       	adc	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	5a 95       	dec	r21
    28e2:	a9 f7       	brne	.-22     	; 0x28ce <__udivmodhi4_loop>
    28e4:	80 95       	com	r24
    28e6:	90 95       	com	r25
    28e8:	bc 01       	movw	r22, r24
    28ea:	cd 01       	movw	r24, r26
    28ec:	08 95       	ret

000028ee <_exit>:
    28ee:	f8 94       	cli

000028f0 <__stop_program>:
    28f0:	ff cf       	rjmp	.-2      	; 0x28f0 <__stop_program>
